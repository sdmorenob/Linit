/*
 * generated by Xtext 2.12.0
 */
package linit.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LinitGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDDeclaracionesParserRuleCall_0_0 = (RuleCall)cDAssignment_0.eContents().get(0);
		private final Assignment cIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIInstruccionesParserRuleCall_1_0 = (RuleCall)cIAssignment_1.eContents().get(0);
		
		//programa:
		//	d=declaraciones i=instrucciones;
		@Override public ParserRule getRule() { return rule; }
		
		//d=declaraciones i=instrucciones
		public Group getGroup() { return cGroup; }
		
		//d=declaraciones
		public Assignment getDAssignment_0() { return cDAssignment_0; }
		
		//declaraciones
		public RuleCall getDDeclaracionesParserRuleCall_0_0() { return cDDeclaracionesParserRuleCall_0_0; }
		
		//i=instrucciones
		public Assignment getIAssignment_1() { return cIAssignment_1; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_0() { return cIInstruccionesParserRuleCall_1_0; }
	}
	public class DeclaracionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.declaraciones");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPROCEDIMIENTOKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cPROCEDIMIENTOTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cParametrosParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIInstruccionesParserRuleCall_4_0 = (RuleCall)cIAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cFINKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final RuleCall cFINTerminalRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDDeclaracionesParserRuleCall_7_0 = (RuleCall)cDAssignment_7.eContents().get(0);
		
		//declaraciones:
		//	(('PROCEDIMIENTO' | PROCEDIMIENTO) IDENTIFICADOR
		//	parametros
		//	':'
		//	i=instrucciones ('FIN' | FIN)
		//	'.'
		//	d=declaraciones)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(('PROCEDIMIENTO' | PROCEDIMIENTO) IDENTIFICADOR parametros ':' i=instrucciones ('FIN' | FIN) '.' d=declaraciones)?
		public Group getGroup() { return cGroup; }
		
		//'PROCEDIMIENTO' | PROCEDIMIENTO
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'PROCEDIMIENTO'
		public Keyword getPROCEDIMIENTOKeyword_0_0() { return cPROCEDIMIENTOKeyword_0_0; }
		
		//PROCEDIMIENTO
		public RuleCall getPROCEDIMIENTOTerminalRuleCall_0_1() { return cPROCEDIMIENTOTerminalRuleCall_0_1; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_1() { return cIDENTIFICADORTerminalRuleCall_1; }
		
		//parametros
		public RuleCall getParametrosParserRuleCall_2() { return cParametrosParserRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//i=instrucciones
		public Assignment getIAssignment_4() { return cIAssignment_4; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_4_0() { return cIInstruccionesParserRuleCall_4_0; }
		
		//'FIN' | FIN
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'FIN'
		public Keyword getFINKeyword_5_0() { return cFINKeyword_5_0; }
		
		//FIN
		public RuleCall getFINTerminalRuleCall_5_1() { return cFINTerminalRuleCall_5_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//d=declaraciones
		public Assignment getDAssignment_7() { return cDAssignment_7; }
		
		//declaraciones
		public RuleCall getDDeclaracionesParserRuleCall_7_0() { return cDDeclaracionesParserRuleCall_7_0; }
	}
	public class ParametrosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.parametros");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cIMPORTAKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cIMPORTATerminalRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_0_0 = (Alternatives)cGroup_0_1_0.eContents().get(0);
		private final Keyword cVARIABLEKeyword_0_1_0_0_0 = (Keyword)cAlternatives_0_1_0_0.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_0_1_0_0_1 = (RuleCall)cAlternatives_0_1_0_0.eContents().get(1);
		private final RuleCall cTipoVariableParserRuleCall_0_1_0_1 = (RuleCall)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_0_1_0_2 = (RuleCall)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cArregloParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cListaParametrosParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExporta2ParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cExporta2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//parametros:
		//	('IMPORTA' | IMPORTA) (('VARIABLE' | VARIABLE) tipoVariable
		//	IDENTIFICADOR | arreglo) listaParametros
		//	exporta2
		//	| exporta2;
		@Override public ParserRule getRule() { return rule; }
		
		//('IMPORTA' | IMPORTA) (('VARIABLE' | VARIABLE) tipoVariable IDENTIFICADOR | arreglo) listaParametros exporta2 | exporta2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('IMPORTA' | IMPORTA) (('VARIABLE' | VARIABLE) tipoVariable IDENTIFICADOR | arreglo) listaParametros exporta2
		public Group getGroup_0() { return cGroup_0; }
		
		//'IMPORTA' | IMPORTA
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'IMPORTA'
		public Keyword getIMPORTAKeyword_0_0_0() { return cIMPORTAKeyword_0_0_0; }
		
		//IMPORTA
		public RuleCall getIMPORTATerminalRuleCall_0_0_1() { return cIMPORTATerminalRuleCall_0_0_1; }
		
		//('VARIABLE' | VARIABLE) tipoVariable IDENTIFICADOR | arreglo
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//('VARIABLE' | VARIABLE) tipoVariable IDENTIFICADOR
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//'VARIABLE' | VARIABLE
		public Alternatives getAlternatives_0_1_0_0() { return cAlternatives_0_1_0_0; }
		
		//'VARIABLE'
		public Keyword getVARIABLEKeyword_0_1_0_0_0() { return cVARIABLEKeyword_0_1_0_0_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0_1_0_0_1() { return cVARIABLETerminalRuleCall_0_1_0_0_1; }
		
		//tipoVariable
		public RuleCall getTipoVariableParserRuleCall_0_1_0_1() { return cTipoVariableParserRuleCall_0_1_0_1; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_0_1_0_2() { return cIDENTIFICADORTerminalRuleCall_0_1_0_2; }
		
		//arreglo
		public RuleCall getArregloParserRuleCall_0_1_1() { return cArregloParserRuleCall_0_1_1; }
		
		//listaParametros
		public RuleCall getListaParametrosParserRuleCall_0_2() { return cListaParametrosParserRuleCall_0_2; }
		
		//exporta2
		public RuleCall getExporta2ParserRuleCall_0_3() { return cExporta2ParserRuleCall_0_3; }
		
		//exporta2
		public RuleCall getExporta2ParserRuleCall_1() { return cExporta2ParserRuleCall_1; }
	}
	public class Exporta2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.exporta2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEXPORTAKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cEXPORTATerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cVARIABLEKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1_0_0_1 = (RuleCall)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cTipoVariableParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final RuleCall cArregloParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cListaParametrosParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//exporta2:
		//	(('EXPORTA' | EXPORTA) (('VARIABLE' | VARIABLE) tipoVariable
		//	IDENTIFICADOR | arreglo) listaParametros)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(('EXPORTA' | EXPORTA) (('VARIABLE' | VARIABLE) tipoVariable IDENTIFICADOR | arreglo) listaParametros)?
		public Group getGroup() { return cGroup; }
		
		//'EXPORTA' | EXPORTA
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'EXPORTA'
		public Keyword getEXPORTAKeyword_0_0() { return cEXPORTAKeyword_0_0; }
		
		//EXPORTA
		public RuleCall getEXPORTATerminalRuleCall_0_1() { return cEXPORTATerminalRuleCall_0_1; }
		
		//('VARIABLE' | VARIABLE) tipoVariable IDENTIFICADOR | arreglo
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('VARIABLE' | VARIABLE) tipoVariable IDENTIFICADOR
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'VARIABLE' | VARIABLE
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'VARIABLE'
		public Keyword getVARIABLEKeyword_1_0_0_0() { return cVARIABLEKeyword_1_0_0_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_0_0_1() { return cVARIABLETerminalRuleCall_1_0_0_1; }
		
		//tipoVariable
		public RuleCall getTipoVariableParserRuleCall_1_0_1() { return cTipoVariableParserRuleCall_1_0_1; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_1_0_2() { return cIDENTIFICADORTerminalRuleCall_1_0_2; }
		
		//arreglo
		public RuleCall getArregloParserRuleCall_1_1() { return cArregloParserRuleCall_1_1; }
		
		//listaParametros
		public RuleCall getListaParametrosParserRuleCall_2() { return cListaParametrosParserRuleCall_2; }
	}
	public class ListaParametrosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.listaParametros");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTipoVariableParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cArregloParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cListaParametrosParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//listaParametros:
		//	(';' (tipoVariable
		//	IDENTIFICADOR | arreglo) listaParametros)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(';' (tipoVariable IDENTIFICADOR | arreglo) listaParametros)?
		public Group getGroup() { return cGroup; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//tipoVariable IDENTIFICADOR | arreglo
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//tipoVariable IDENTIFICADOR
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//tipoVariable
		public RuleCall getTipoVariableParserRuleCall_1_0_0() { return cTipoVariableParserRuleCall_1_0_0; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_1_0_1() { return cIDENTIFICADORTerminalRuleCall_1_0_1; }
		
		//arreglo
		public RuleCall getArregloParserRuleCall_1_1() { return cArregloParserRuleCall_1_1; }
		
		//listaParametros
		public RuleCall getListaParametrosParserRuleCall_2() { return cListaParametrosParserRuleCall_2; }
	}
	public class InstruccionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.instrucciones");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstruccionesAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cNominacionParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cIAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cIInstruccionesParserRuleCall_1_0_2_0 = (RuleCall)cIAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cArregloParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cIAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cIInstruccionesParserRuleCall_1_1_2_0 = (RuleCall)cIAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cLlamadaIdentificadorParserRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cIAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cIInstruccionesParserRuleCall_1_2_2_0 = (RuleCall)cIAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cCAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cCCondicionalParserRuleCall_1_3_0_0 = (RuleCall)cCAssignment_1_3_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cIAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cIInstruccionesParserRuleCall_1_3_2_0 = (RuleCall)cIAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cFAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cFCicloParserRuleCall_1_4_0_0 = (RuleCall)cFAssignment_1_4_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cIAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cIInstruccionesParserRuleCall_1_4_2_0 = (RuleCall)cIAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final RuleCall cImpresionParserRuleCall_1_5_0 = (RuleCall)cGroup_1_5.eContents().get(0);
		private final Keyword cFullStopKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Assignment cIAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cIInstruccionesParserRuleCall_1_5_2_0 = (RuleCall)cIAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final RuleCall cEntradaParserRuleCall_1_6_0 = (RuleCall)cGroup_1_6.eContents().get(0);
		private final Keyword cFullStopKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cIAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cIInstruccionesParserRuleCall_1_6_2_0 = (RuleCall)cIAssignment_1_6_2.eContents().get(0);
		
		//instrucciones:
		//	{instrucciones} (nominacion '.' i=instrucciones
		//	| arreglo '.' i=instrucciones
		//	| llamadaIdentificador '.' i=instrucciones
		//	| c=condicional '.' i=instrucciones
		//	| f+=ciclo '.' i=instrucciones
		//	| impresion '.' i=instrucciones
		//	| entrada '.' i=instrucciones)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{instrucciones} (nominacion '.' i=instrucciones | arreglo '.' i=instrucciones | llamadaIdentificador '.' i=instrucciones
		//| c=condicional '.' i=instrucciones | f+=ciclo '.' i=instrucciones | impresion '.' i=instrucciones | entrada '.'
		//i=instrucciones)?
		public Group getGroup() { return cGroup; }
		
		//{instrucciones}
		public Action getInstruccionesAction_0() { return cInstruccionesAction_0; }
		
		//(nominacion '.' i=instrucciones | arreglo '.' i=instrucciones | llamadaIdentificador '.' i=instrucciones | c=condicional
		//'.' i=instrucciones | f+=ciclo '.' i=instrucciones | impresion '.' i=instrucciones | entrada '.' i=instrucciones)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//nominacion '.' i=instrucciones
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//nominacion
		public RuleCall getNominacionParserRuleCall_1_0_0() { return cNominacionParserRuleCall_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//i=instrucciones
		public Assignment getIAssignment_1_0_2() { return cIAssignment_1_0_2; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_0_2_0() { return cIInstruccionesParserRuleCall_1_0_2_0; }
		
		//arreglo '.' i=instrucciones
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//arreglo
		public RuleCall getArregloParserRuleCall_1_1_0() { return cArregloParserRuleCall_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }
		
		//i=instrucciones
		public Assignment getIAssignment_1_1_2() { return cIAssignment_1_1_2; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_1_2_0() { return cIInstruccionesParserRuleCall_1_1_2_0; }
		
		//llamadaIdentificador '.' i=instrucciones
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//llamadaIdentificador
		public RuleCall getLlamadaIdentificadorParserRuleCall_1_2_0() { return cLlamadaIdentificadorParserRuleCall_1_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_1() { return cFullStopKeyword_1_2_1; }
		
		//i=instrucciones
		public Assignment getIAssignment_1_2_2() { return cIAssignment_1_2_2; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_2_2_0() { return cIInstruccionesParserRuleCall_1_2_2_0; }
		
		//c=condicional '.' i=instrucciones
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//c=condicional
		public Assignment getCAssignment_1_3_0() { return cCAssignment_1_3_0; }
		
		//condicional
		public RuleCall getCCondicionalParserRuleCall_1_3_0_0() { return cCCondicionalParserRuleCall_1_3_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_3_1() { return cFullStopKeyword_1_3_1; }
		
		//i=instrucciones
		public Assignment getIAssignment_1_3_2() { return cIAssignment_1_3_2; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_3_2_0() { return cIInstruccionesParserRuleCall_1_3_2_0; }
		
		//f+=ciclo '.' i=instrucciones
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//f+=ciclo
		public Assignment getFAssignment_1_4_0() { return cFAssignment_1_4_0; }
		
		//ciclo
		public RuleCall getFCicloParserRuleCall_1_4_0_0() { return cFCicloParserRuleCall_1_4_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_4_1() { return cFullStopKeyword_1_4_1; }
		
		//i=instrucciones
		public Assignment getIAssignment_1_4_2() { return cIAssignment_1_4_2; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_4_2_0() { return cIInstruccionesParserRuleCall_1_4_2_0; }
		
		//impresion '.' i=instrucciones
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//impresion
		public RuleCall getImpresionParserRuleCall_1_5_0() { return cImpresionParserRuleCall_1_5_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_5_1() { return cFullStopKeyword_1_5_1; }
		
		//i=instrucciones
		public Assignment getIAssignment_1_5_2() { return cIAssignment_1_5_2; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_5_2_0() { return cIInstruccionesParserRuleCall_1_5_2_0; }
		
		//entrada '.' i=instrucciones
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//entrada
		public RuleCall getEntradaParserRuleCall_1_6_0() { return cEntradaParserRuleCall_1_6_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_6_1() { return cFullStopKeyword_1_6_1; }
		
		//i=instrucciones
		public Assignment getIAssignment_1_6_2() { return cIAssignment_1_6_2; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_6_2_0() { return cIInstruccionesParserRuleCall_1_6_2_0; }
	}
	public class NominacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.nominacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cVARIABLEKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cTipoVariableParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cIgualdadParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cCONSTANTEKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cCONSTANTETerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTipoVariableParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cIgualdadParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//nominacion:
		//	('VARIABLE' | VARIABLE) tipoVariable
		//	IDENTIFICADOR
		//	igualdad?
		//	| ('CONSTANTE' | CONSTANTE) tipoVariable
		//	IDENTIFICADOR
		//	igualdad;
		@Override public ParserRule getRule() { return rule; }
		
		//('VARIABLE' | VARIABLE) tipoVariable IDENTIFICADOR igualdad? | ('CONSTANTE' | CONSTANTE) tipoVariable IDENTIFICADOR
		//igualdad
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('VARIABLE' | VARIABLE) tipoVariable IDENTIFICADOR igualdad?
		public Group getGroup_0() { return cGroup_0; }
		
		//'VARIABLE' | VARIABLE
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'VARIABLE'
		public Keyword getVARIABLEKeyword_0_0_0() { return cVARIABLEKeyword_0_0_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0_0_1() { return cVARIABLETerminalRuleCall_0_0_1; }
		
		//tipoVariable
		public RuleCall getTipoVariableParserRuleCall_0_1() { return cTipoVariableParserRuleCall_0_1; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_0_2() { return cIDENTIFICADORTerminalRuleCall_0_2; }
		
		//igualdad?
		public RuleCall getIgualdadParserRuleCall_0_3() { return cIgualdadParserRuleCall_0_3; }
		
		//('CONSTANTE' | CONSTANTE) tipoVariable IDENTIFICADOR igualdad
		public Group getGroup_1() { return cGroup_1; }
		
		//'CONSTANTE' | CONSTANTE
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'CONSTANTE'
		public Keyword getCONSTANTEKeyword_1_0_0() { return cCONSTANTEKeyword_1_0_0; }
		
		//CONSTANTE
		public RuleCall getCONSTANTETerminalRuleCall_1_0_1() { return cCONSTANTETerminalRuleCall_1_0_1; }
		
		//tipoVariable
		public RuleCall getTipoVariableParserRuleCall_1_1() { return cTipoVariableParserRuleCall_1_1; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_1_2() { return cIDENTIFICADORTerminalRuleCall_1_2; }
		
		//igualdad
		public RuleCall getIgualdadParserRuleCall_1_3() { return cIgualdadParserRuleCall_1_3; }
	}
	public class ArregloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.arreglo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cARREGLOKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cAREGLOTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cVARIABLEKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//arreglo:
		//	('ARREGLO' | AREGLO) ('VARIABLE' | VARIABLE) IDENTIFICADOR;
		@Override public ParserRule getRule() { return rule; }
		
		//('ARREGLO' | AREGLO) ('VARIABLE' | VARIABLE) IDENTIFICADOR
		public Group getGroup() { return cGroup; }
		
		//'ARREGLO' | AREGLO
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ARREGLO'
		public Keyword getARREGLOKeyword_0_0() { return cARREGLOKeyword_0_0; }
		
		//AREGLO
		public RuleCall getAREGLOTerminalRuleCall_0_1() { return cAREGLOTerminalRuleCall_0_1; }
		
		//'VARIABLE' | VARIABLE
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'VARIABLE'
		public Keyword getVARIABLEKeyword_1_0() { return cVARIABLEKeyword_1_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_1() { return cVARIABLETerminalRuleCall_1_1; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_2() { return cIDENTIFICADORTerminalRuleCall_2; }
	}
	public class LlamadaIdentificadorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.llamadaIdentificador");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cCUADRADOITerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cExpresionParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cListaArregloParserRuleCall_0_1_2 = (RuleCall)cGroup_0_1.eContents().get(2);
		private final RuleCall cCUADRADODTerminalRuleCall_0_1_3 = (RuleCall)cGroup_0_1.eContents().get(3);
		private final RuleCall cIgualdadParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cIMPORTAKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cIMPORTATerminalRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cExpresionParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cListaArregloParserRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cEXPORTAKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cEXPORTATerminalRuleCall_1_2_0_1 = (RuleCall)cAlternatives_1_2_0.eContents().get(1);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final RuleCall cListaIdentificadoresParserRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		
		//llamadaIdentificador:
		//	IDENTIFICADOR (CUADRADOI
		//	expresion listaArreglo
		//	CUADRADOD)?
		//	igualdad
		//	| IDENTIFICADOR (('IMPORTA' | IMPORTA) expresion
		//	listaArreglo)? (('EXPORTA' | EXPORTA) IDENTIFICADOR
		//	listaIdentificadores)?;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFICADOR (CUADRADOI expresion listaArreglo CUADRADOD)? igualdad | IDENTIFICADOR (('IMPORTA' | IMPORTA) expresion
		//listaArreglo)? (('EXPORTA' | EXPORTA) IDENTIFICADOR listaIdentificadores)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFICADOR (CUADRADOI expresion listaArreglo CUADRADOD)? igualdad
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_0_0() { return cIDENTIFICADORTerminalRuleCall_0_0; }
		
		//(CUADRADOI expresion listaArreglo CUADRADOD)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//CUADRADOI
		public RuleCall getCUADRADOITerminalRuleCall_0_1_0() { return cCUADRADOITerminalRuleCall_0_1_0; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_0_1_1() { return cExpresionParserRuleCall_0_1_1; }
		
		//listaArreglo
		public RuleCall getListaArregloParserRuleCall_0_1_2() { return cListaArregloParserRuleCall_0_1_2; }
		
		//CUADRADOD
		public RuleCall getCUADRADODTerminalRuleCall_0_1_3() { return cCUADRADODTerminalRuleCall_0_1_3; }
		
		//igualdad
		public RuleCall getIgualdadParserRuleCall_0_2() { return cIgualdadParserRuleCall_0_2; }
		
		//IDENTIFICADOR (('IMPORTA' | IMPORTA) expresion listaArreglo)? (('EXPORTA' | EXPORTA) IDENTIFICADOR
		//listaIdentificadores)?
		public Group getGroup_1() { return cGroup_1; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_1_0() { return cIDENTIFICADORTerminalRuleCall_1_0; }
		
		//(('IMPORTA' | IMPORTA) expresion listaArreglo)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'IMPORTA' | IMPORTA
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//'IMPORTA'
		public Keyword getIMPORTAKeyword_1_1_0_0() { return cIMPORTAKeyword_1_1_0_0; }
		
		//IMPORTA
		public RuleCall getIMPORTATerminalRuleCall_1_1_0_1() { return cIMPORTATerminalRuleCall_1_1_0_1; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_1_1_1() { return cExpresionParserRuleCall_1_1_1; }
		
		//listaArreglo
		public RuleCall getListaArregloParserRuleCall_1_1_2() { return cListaArregloParserRuleCall_1_1_2; }
		
		//(('EXPORTA' | EXPORTA) IDENTIFICADOR listaIdentificadores)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'EXPORTA' | EXPORTA
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }
		
		//'EXPORTA'
		public Keyword getEXPORTAKeyword_1_2_0_0() { return cEXPORTAKeyword_1_2_0_0; }
		
		//EXPORTA
		public RuleCall getEXPORTATerminalRuleCall_1_2_0_1() { return cEXPORTATerminalRuleCall_1_2_0_1; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_1_2_1() { return cIDENTIFICADORTerminalRuleCall_1_2_1; }
		
		//listaIdentificadores
		public RuleCall getListaIdentificadoresParserRuleCall_1_2_2() { return cListaIdentificadoresParserRuleCall_1_2_2; }
	}
	public class CondicionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.condicional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSIKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cSITerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cExpresionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIInstruccionesParserRuleCall_3_0 = (RuleCall)cIAssignment_3.eContents().get(0);
		private final Assignment cLAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLListaCondicionalParserRuleCall_4_0 = (RuleCall)cLAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cFINKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final RuleCall cFINTerminalRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		
		//condicional:
		//	('SI' | SI) expresion ':'
		//	i=instrucciones
		//	l=listaCondicional ('FIN' | FIN);
		@Override public ParserRule getRule() { return rule; }
		
		//('SI' | SI) expresion ':' i=instrucciones l=listaCondicional ('FIN' | FIN)
		public Group getGroup() { return cGroup; }
		
		//'SI' | SI
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'SI'
		public Keyword getSIKeyword_0_0() { return cSIKeyword_0_0; }
		
		//SI
		public RuleCall getSITerminalRuleCall_0_1() { return cSITerminalRuleCall_0_1; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_1() { return cExpresionParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//i=instrucciones
		public Assignment getIAssignment_3() { return cIAssignment_3; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_3_0() { return cIInstruccionesParserRuleCall_3_0; }
		
		//l=listaCondicional
		public Assignment getLAssignment_4() { return cLAssignment_4; }
		
		//listaCondicional
		public RuleCall getLListaCondicionalParserRuleCall_4_0() { return cLListaCondicionalParserRuleCall_4_0; }
		
		//'FIN' | FIN
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'FIN'
		public Keyword getFINKeyword_5_0() { return cFINKeyword_5_0; }
		
		//FIN
		public RuleCall getFINTerminalRuleCall_5_1() { return cFINTerminalRuleCall_5_1; }
	}
	public class CicloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.ciclo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cREPETIRKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cREPETIRTerminalRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cExpresionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cVECESKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cVECESTerminalRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cInstruccionesParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Alternatives cAlternatives_0_5 = (Alternatives)cGroup_0.eContents().get(5);
		private final Keyword cFINKeyword_0_5_0 = (Keyword)cAlternatives_0_5.eContents().get(0);
		private final RuleCall cFINTerminalRuleCall_0_5_1 = (RuleCall)cAlternatives_0_5.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cREPETIRKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cREPETIRTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cMIENTRASKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cMIENTRASTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cExpresionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Keyword cSEAKeyword_1_3_0 = (Keyword)cAlternatives_1_3.eContents().get(0);
		private final RuleCall cSEATerminalRuleCall_1_3_1 = (RuleCall)cAlternatives_1_3.eContents().get(1);
		private final RuleCall cLogicoParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Keyword cColonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final RuleCall cInstruccionesParserRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final Alternatives cAlternatives_1_7 = (Alternatives)cGroup_1.eContents().get(7);
		private final Keyword cFINKeyword_1_7_0 = (Keyword)cAlternatives_1_7.eContents().get(0);
		private final RuleCall cFINTerminalRuleCall_1_7_1 = (RuleCall)cAlternatives_1_7.eContents().get(1);
		
		//ciclo:
		//	('REPETIR' | REPETIR) expresion ('VECES' | VECES)
		//	':'
		//	instrucciones ('FIN' | FIN) | ('REPETIR' | REPETIR) ('MIENTRAS' | MIENTRAS) expresion ('SEA' | SEA) logico
		//	':'
		//	instrucciones ('FIN' | FIN);
		@Override public ParserRule getRule() { return rule; }
		
		//('REPETIR' | REPETIR) expresion ('VECES' | VECES) ':' instrucciones ('FIN' | FIN) | ('REPETIR' | REPETIR) ('MIENTRAS' |
		//MIENTRAS) expresion ('SEA' | SEA) logico ':' instrucciones ('FIN' | FIN)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('REPETIR' | REPETIR) expresion ('VECES' | VECES) ':' instrucciones ('FIN' | FIN)
		public Group getGroup_0() { return cGroup_0; }
		
		//'REPETIR' | REPETIR
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'REPETIR'
		public Keyword getREPETIRKeyword_0_0_0() { return cREPETIRKeyword_0_0_0; }
		
		//REPETIR
		public RuleCall getREPETIRTerminalRuleCall_0_0_1() { return cREPETIRTerminalRuleCall_0_0_1; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_0_1() { return cExpresionParserRuleCall_0_1; }
		
		//'VECES' | VECES
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//'VECES'
		public Keyword getVECESKeyword_0_2_0() { return cVECESKeyword_0_2_0; }
		
		//VECES
		public RuleCall getVECESTerminalRuleCall_0_2_1() { return cVECESTerminalRuleCall_0_2_1; }
		
		//':'
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }
		
		//instrucciones
		public RuleCall getInstruccionesParserRuleCall_0_4() { return cInstruccionesParserRuleCall_0_4; }
		
		//'FIN' | FIN
		public Alternatives getAlternatives_0_5() { return cAlternatives_0_5; }
		
		//'FIN'
		public Keyword getFINKeyword_0_5_0() { return cFINKeyword_0_5_0; }
		
		//FIN
		public RuleCall getFINTerminalRuleCall_0_5_1() { return cFINTerminalRuleCall_0_5_1; }
		
		//('REPETIR' | REPETIR) ('MIENTRAS' | MIENTRAS) expresion ('SEA' | SEA) logico ':' instrucciones ('FIN' | FIN)
		public Group getGroup_1() { return cGroup_1; }
		
		//'REPETIR' | REPETIR
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'REPETIR'
		public Keyword getREPETIRKeyword_1_0_0() { return cREPETIRKeyword_1_0_0; }
		
		//REPETIR
		public RuleCall getREPETIRTerminalRuleCall_1_0_1() { return cREPETIRTerminalRuleCall_1_0_1; }
		
		//'MIENTRAS' | MIENTRAS
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'MIENTRAS'
		public Keyword getMIENTRASKeyword_1_1_0() { return cMIENTRASKeyword_1_1_0; }
		
		//MIENTRAS
		public RuleCall getMIENTRASTerminalRuleCall_1_1_1() { return cMIENTRASTerminalRuleCall_1_1_1; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_1_2() { return cExpresionParserRuleCall_1_2; }
		
		//'SEA' | SEA
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//'SEA'
		public Keyword getSEAKeyword_1_3_0() { return cSEAKeyword_1_3_0; }
		
		//SEA
		public RuleCall getSEATerminalRuleCall_1_3_1() { return cSEATerminalRuleCall_1_3_1; }
		
		//logico
		public RuleCall getLogicoParserRuleCall_1_4() { return cLogicoParserRuleCall_1_4; }
		
		//':'
		public Keyword getColonKeyword_1_5() { return cColonKeyword_1_5; }
		
		//instrucciones
		public RuleCall getInstruccionesParserRuleCall_1_6() { return cInstruccionesParserRuleCall_1_6; }
		
		//'FIN' | FIN
		public Alternatives getAlternatives_1_7() { return cAlternatives_1_7; }
		
		//'FIN'
		public Keyword getFINKeyword_1_7_0() { return cFINKeyword_1_7_0; }
		
		//FIN
		public RuleCall getFINTerminalRuleCall_1_7_1() { return cFINTerminalRuleCall_1_7_1; }
	}
	public class ImpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.impresion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIMPRIMIRENCONSOLAKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cIMPRIMIRTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cExpresionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cListaImpresionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//impresion:
		//	('IMPRIMIR EN CONSOLA' | IMPRIMIR) expresion
		//	listaImpresion;
		@Override public ParserRule getRule() { return rule; }
		
		//('IMPRIMIR EN CONSOLA' | IMPRIMIR) expresion listaImpresion
		public Group getGroup() { return cGroup; }
		
		//'IMPRIMIR EN CONSOLA' | IMPRIMIR
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'IMPRIMIR EN CONSOLA'
		public Keyword getIMPRIMIRENCONSOLAKeyword_0_0() { return cIMPRIMIRENCONSOLAKeyword_0_0; }
		
		//IMPRIMIR
		public RuleCall getIMPRIMIRTerminalRuleCall_0_1() { return cIMPRIMIRTerminalRuleCall_0_1; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_1() { return cExpresionParserRuleCall_1; }
		
		//listaImpresion
		public RuleCall getListaImpresionParserRuleCall_2() { return cListaImpresionParserRuleCall_2; }
	}
	public class EntradaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.entrada");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCAPTURARDECONSOLAKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cCAPTURARTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//entrada:
		//	('CAPTURAR DE CONSOLA' | CAPTURAR) IDENTIFICADOR;
		@Override public ParserRule getRule() { return rule; }
		
		//('CAPTURAR DE CONSOLA' | CAPTURAR) IDENTIFICADOR
		public Group getGroup() { return cGroup; }
		
		//'CAPTURAR DE CONSOLA' | CAPTURAR
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'CAPTURAR DE CONSOLA'
		public Keyword getCAPTURARDECONSOLAKeyword_0_0() { return cCAPTURARDECONSOLAKeyword_0_0; }
		
		//CAPTURAR
		public RuleCall getCAPTURARTerminalRuleCall_0_1() { return cCAPTURARTerminalRuleCall_0_1; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_1() { return cIDENTIFICADORTerminalRuleCall_1; }
	}
	public class TipoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.tipoVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Keyword cENTERAKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cENTERATerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Keyword cREALKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final RuleCall cREALTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cAlternatives.eContents().get(2);
		private final Keyword cLOGICAKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final RuleCall cLOGICATerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cAlternatives.eContents().get(3);
		private final Keyword cDECARACTERESKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final RuleCall cCARACTERESTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//tipoVariable:
		//	('ENTERA' | ENTERA) | ('REAL' | REAL) | ('LOGICA' | LOGICA) | ('DE CARACTERES' | CARACTERES);
		@Override public ParserRule getRule() { return rule; }
		
		//('ENTERA' | ENTERA) | ('REAL' | REAL) | ('LOGICA' | LOGICA) | ('DE CARACTERES' | CARACTERES)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('ENTERA' | ENTERA)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ENTERA'
		public Keyword getENTERAKeyword_0_0() { return cENTERAKeyword_0_0; }
		
		//ENTERA
		public RuleCall getENTERATerminalRuleCall_0_1() { return cENTERATerminalRuleCall_0_1; }
		
		//('REAL' | REAL)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'REAL'
		public Keyword getREALKeyword_1_0() { return cREALKeyword_1_0; }
		
		//REAL
		public RuleCall getREALTerminalRuleCall_1_1() { return cREALTerminalRuleCall_1_1; }
		
		//('LOGICA' | LOGICA)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'LOGICA'
		public Keyword getLOGICAKeyword_2_0() { return cLOGICAKeyword_2_0; }
		
		//LOGICA
		public RuleCall getLOGICATerminalRuleCall_2_1() { return cLOGICATerminalRuleCall_2_1; }
		
		//('DE CARACTERES' | CARACTERES)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'DE CARACTERES'
		public Keyword getDECARACTERESKeyword_3_0() { return cDECARACTERESKeyword_3_0; }
		
		//CARACTERES
		public RuleCall getCARACTERESTerminalRuleCall_3_1() { return cCARACTERESTerminalRuleCall_3_1; }
	}
	public class IgualdadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.igualdad");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cESIGUALAKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cIGUALTerminalRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cExpresionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSIGNOIGUALTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExpresionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//igualdad:
		//	('ES IGUAL A' | IGUAL) expresion
		//	| SIGNOIGUAL
		//	expresion;
		@Override public ParserRule getRule() { return rule; }
		
		//('ES IGUAL A' | IGUAL) expresion | SIGNOIGUAL expresion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('ES IGUAL A' | IGUAL) expresion
		public Group getGroup_0() { return cGroup_0; }
		
		//'ES IGUAL A' | IGUAL
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'ES IGUAL A'
		public Keyword getESIGUALAKeyword_0_0_0() { return cESIGUALAKeyword_0_0_0; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_0_0_1() { return cIGUALTerminalRuleCall_0_0_1; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_0_1() { return cExpresionParserRuleCall_0_1; }
		
		//SIGNOIGUAL expresion
		public Group getGroup_1() { return cGroup_1; }
		
		//SIGNOIGUAL
		public RuleCall getSIGNOIGUALTerminalRuleCall_1_0() { return cSIGNOIGUALTerminalRuleCall_1_0; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_1_1() { return cExpresionParserRuleCall_1_1; }
	}
	public class ListaIdentificadoresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.listaIdentificadores");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cListaIdentificadoresParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//listaIdentificadores:
		//	(';' IDENTIFICADOR listaIdentificadores)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(';' IDENTIFICADOR listaIdentificadores)?
		public Group getGroup() { return cGroup; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_1() { return cIDENTIFICADORTerminalRuleCall_1; }
		
		//listaIdentificadores
		public RuleCall getListaIdentificadoresParserRuleCall_2() { return cListaIdentificadoresParserRuleCall_2; }
	}
	public class ExpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.expresion");
		private final RuleCall cOperacionOYParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//expresion:
		//	operacionOY;
		@Override public ParserRule getRule() { return rule; }
		
		//operacionOY
		public RuleCall getOperacionOYParserRuleCall() { return cOperacionOYParserRuleCall; }
	}
	public class OperacionOYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.operacionOY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparacionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cYKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cSIGNOYTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cSIGNOOTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cOperacionOYParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//operacionOY:
		//	comparacion (('Y' | SIGNOY | 'O' | SIGNOO) operacionOY)?;
		@Override public ParserRule getRule() { return rule; }
		
		//comparacion (('Y' | SIGNOY | 'O' | SIGNOO) operacionOY)?
		public Group getGroup() { return cGroup; }
		
		//comparacion
		public RuleCall getComparacionParserRuleCall_0() { return cComparacionParserRuleCall_0; }
		
		//(('Y' | SIGNOY | 'O' | SIGNOO) operacionOY)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'Y' | SIGNOY | 'O' | SIGNOO
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'Y'
		public Keyword getYKeyword_1_0_0() { return cYKeyword_1_0_0; }
		
		//SIGNOY
		public RuleCall getSIGNOYTerminalRuleCall_1_0_1() { return cSIGNOYTerminalRuleCall_1_0_1; }
		
		//'O'
		public Keyword getOKeyword_1_0_2() { return cOKeyword_1_0_2; }
		
		//SIGNOO
		public RuleCall getSIGNOOTerminalRuleCall_1_0_3() { return cSIGNOOTerminalRuleCall_1_0_3; }
		
		//operacionOY
		public RuleCall getOperacionOYParserRuleCall_1_1() { return cOperacionOYParserRuleCall_1_1; }
	}
	public class ComparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.comparacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAritmeticaParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOpcomparacionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cComparacionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//comparacion:
		//	aritmetica (opcomparacion comparacion)?;
		@Override public ParserRule getRule() { return rule; }
		
		//aritmetica (opcomparacion comparacion)?
		public Group getGroup() { return cGroup; }
		
		//aritmetica
		public RuleCall getAritmeticaParserRuleCall_0() { return cAritmeticaParserRuleCall_0; }
		
		//(opcomparacion comparacion)?
		public Group getGroup_1() { return cGroup_1; }
		
		//opcomparacion
		public RuleCall getOpcomparacionParserRuleCall_1_0() { return cOpcomparacionParserRuleCall_1_0; }
		
		//comparacion
		public RuleCall getComparacionParserRuleCall_1_1() { return cComparacionParserRuleCall_1_1; }
	}
	public class OpcomparacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.opcomparacion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cAlternatives_0.eContents().get(0);
		private final Keyword cESMENORAKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cMENORTerminalRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cSIGNOMENORTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cAlternatives_1.eContents().get(0);
		private final Keyword cESMENOROIGUALAKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cMENORIGUALTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cSIGNOMENORIGUALTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cAlternatives_2.eContents().get(0);
		private final Keyword cESMAYORAKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cMAYORTerminalRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cSIGNOMAYORTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cAlternatives.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cAlternatives_3.eContents().get(0);
		private final Keyword cESMAYOROIGUALAKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cMAYORIGUALTerminalRuleCall_3_0_1 = (RuleCall)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cSIGNOMAYORIGUALTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cAlternatives.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cAlternatives_4.eContents().get(0);
		private final Keyword cESDIFERENTEDEAKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cDIFERENTETerminalRuleCall_4_0_1 = (RuleCall)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cSIGNODIFERENTETerminalRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cAlternatives.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cAlternatives_5.eContents().get(0);
		private final Keyword cESIGUALAKeyword_5_0_0 = (Keyword)cAlternatives_5_0.eContents().get(0);
		private final RuleCall cIGUALTerminalRuleCall_5_0_1 = (RuleCall)cAlternatives_5_0.eContents().get(1);
		private final RuleCall cSIGNOIGUALTerminalRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		
		//opcomparacion:
		//	(('ES MENOR A' | MENOR) | SIGNOMENOR) | (('ES MENOR O IGUAL A' | MENORIGUAL) | SIGNOMENORIGUAL) | (('ES MAYOR A' |
		//	MAYOR) | SIGNOMAYOR) | (('ES MAYOR O IGUAL A' | MAYORIGUAL) | SIGNOMAYORIGUAL) | (('ES DIFERENTE DE A' | DIFERENTE) |
		//	SIGNODIFERENTE) | (('ES IGUAL A' | IGUAL) | SIGNOIGUAL);
		@Override public ParserRule getRule() { return rule; }
		
		//(('ES MENOR A' | MENOR) | SIGNOMENOR) | (('ES MENOR O IGUAL A' | MENORIGUAL) | SIGNOMENORIGUAL) | (('ES MAYOR A' |
		//MAYOR) | SIGNOMAYOR) | (('ES MAYOR O IGUAL A' | MAYORIGUAL) | SIGNOMAYORIGUAL) | (('ES DIFERENTE DE A' | DIFERENTE) |
		//SIGNODIFERENTE) | (('ES IGUAL A' | IGUAL) | SIGNOIGUAL)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(('ES MENOR A' | MENOR) | SIGNOMENOR)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//('ES MENOR A' | MENOR)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'ES MENOR A'
		public Keyword getESMENORAKeyword_0_0_0() { return cESMENORAKeyword_0_0_0; }
		
		//MENOR
		public RuleCall getMENORTerminalRuleCall_0_0_1() { return cMENORTerminalRuleCall_0_0_1; }
		
		//SIGNOMENOR
		public RuleCall getSIGNOMENORTerminalRuleCall_0_1() { return cSIGNOMENORTerminalRuleCall_0_1; }
		
		//(('ES MENOR O IGUAL A' | MENORIGUAL) | SIGNOMENORIGUAL)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('ES MENOR O IGUAL A' | MENORIGUAL)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'ES MENOR O IGUAL A'
		public Keyword getESMENOROIGUALAKeyword_1_0_0() { return cESMENOROIGUALAKeyword_1_0_0; }
		
		//MENORIGUAL
		public RuleCall getMENORIGUALTerminalRuleCall_1_0_1() { return cMENORIGUALTerminalRuleCall_1_0_1; }
		
		//SIGNOMENORIGUAL
		public RuleCall getSIGNOMENORIGUALTerminalRuleCall_1_1() { return cSIGNOMENORIGUALTerminalRuleCall_1_1; }
		
		//(('ES MAYOR A' | MAYOR) | SIGNOMAYOR)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//('ES MAYOR A' | MAYOR)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//'ES MAYOR A'
		public Keyword getESMAYORAKeyword_2_0_0() { return cESMAYORAKeyword_2_0_0; }
		
		//MAYOR
		public RuleCall getMAYORTerminalRuleCall_2_0_1() { return cMAYORTerminalRuleCall_2_0_1; }
		
		//SIGNOMAYOR
		public RuleCall getSIGNOMAYORTerminalRuleCall_2_1() { return cSIGNOMAYORTerminalRuleCall_2_1; }
		
		//(('ES MAYOR O IGUAL A' | MAYORIGUAL) | SIGNOMAYORIGUAL)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//('ES MAYOR O IGUAL A' | MAYORIGUAL)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'ES MAYOR O IGUAL A'
		public Keyword getESMAYOROIGUALAKeyword_3_0_0() { return cESMAYOROIGUALAKeyword_3_0_0; }
		
		//MAYORIGUAL
		public RuleCall getMAYORIGUALTerminalRuleCall_3_0_1() { return cMAYORIGUALTerminalRuleCall_3_0_1; }
		
		//SIGNOMAYORIGUAL
		public RuleCall getSIGNOMAYORIGUALTerminalRuleCall_3_1() { return cSIGNOMAYORIGUALTerminalRuleCall_3_1; }
		
		//(('ES DIFERENTE DE A' | DIFERENTE) | SIGNODIFERENTE)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//('ES DIFERENTE DE A' | DIFERENTE)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'ES DIFERENTE DE A'
		public Keyword getESDIFERENTEDEAKeyword_4_0_0() { return cESDIFERENTEDEAKeyword_4_0_0; }
		
		//DIFERENTE
		public RuleCall getDIFERENTETerminalRuleCall_4_0_1() { return cDIFERENTETerminalRuleCall_4_0_1; }
		
		//SIGNODIFERENTE
		public RuleCall getSIGNODIFERENTETerminalRuleCall_4_1() { return cSIGNODIFERENTETerminalRuleCall_4_1; }
		
		//(('ES IGUAL A' | IGUAL) | SIGNOIGUAL)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//('ES IGUAL A' | IGUAL)
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }
		
		//'ES IGUAL A'
		public Keyword getESIGUALAKeyword_5_0_0() { return cESIGUALAKeyword_5_0_0; }
		
		//IGUAL
		public RuleCall getIGUALTerminalRuleCall_5_0_1() { return cIGUALTerminalRuleCall_5_0_1; }
		
		//SIGNOIGUAL
		public RuleCall getSIGNOIGUALTerminalRuleCall_5_1() { return cSIGNOIGUALTerminalRuleCall_5_1; }
	}
	public class AritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.aritmetica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicacion_ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cSUMATerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cRESTATerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cAritmeticaParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//aritmetica:
		//	multiplicacion_ ((SUMA | RESTA) aritmetica)?;
		@Override public ParserRule getRule() { return rule; }
		
		//multiplicacion_ ((SUMA | RESTA) aritmetica)?
		public Group getGroup() { return cGroup; }
		
		//multiplicacion_
		public RuleCall getMultiplicacion_ParserRuleCall_0() { return cMultiplicacion_ParserRuleCall_0; }
		
		//((SUMA | RESTA) aritmetica)?
		public Group getGroup_1() { return cGroup_1; }
		
		//SUMA | RESTA
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//SUMA
		public RuleCall getSUMATerminalRuleCall_1_0_0() { return cSUMATerminalRuleCall_1_0_0; }
		
		//RESTA
		public RuleCall getRESTATerminalRuleCall_1_0_1() { return cRESTATerminalRuleCall_1_0_1; }
		
		//aritmetica
		public RuleCall getAritmeticaParserRuleCall_1_1() { return cAritmeticaParserRuleCall_1_1; }
	}
	public class Multiplicacion_Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.multiplicacion_");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPotenciacionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cMULTIPLICACIONTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDIVISIONTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cMODULOTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cMultiplicacion_ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//multiplicacion_:
		//	potenciacion ((MULTIPLICACION | DIVISION | MODULO) multiplicacion_)?;
		@Override public ParserRule getRule() { return rule; }
		
		//potenciacion ((MULTIPLICACION | DIVISION | MODULO) multiplicacion_)?
		public Group getGroup() { return cGroup; }
		
		//potenciacion
		public RuleCall getPotenciacionParserRuleCall_0() { return cPotenciacionParserRuleCall_0; }
		
		//((MULTIPLICACION | DIVISION | MODULO) multiplicacion_)?
		public Group getGroup_1() { return cGroup_1; }
		
		//MULTIPLICACION | DIVISION | MODULO
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//MULTIPLICACION
		public RuleCall getMULTIPLICACIONTerminalRuleCall_1_0_0() { return cMULTIPLICACIONTerminalRuleCall_1_0_0; }
		
		//DIVISION
		public RuleCall getDIVISIONTerminalRuleCall_1_0_1() { return cDIVISIONTerminalRuleCall_1_0_1; }
		
		//MODULO
		public RuleCall getMODULOTerminalRuleCall_1_0_2() { return cMODULOTerminalRuleCall_1_0_2; }
		
		//multiplicacion_
		public RuleCall getMultiplicacion_ParserRuleCall_1_1() { return cMultiplicacion_ParserRuleCall_1_1; }
	}
	public class PotenciacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.potenciacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegacionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPOTENCIATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cPotenciacionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//potenciacion:
		//	negacion (POTENCIA potenciacion)?;
		@Override public ParserRule getRule() { return rule; }
		
		//negacion (POTENCIA potenciacion)?
		public Group getGroup() { return cGroup; }
		
		//negacion
		public RuleCall getNegacionParserRuleCall_0() { return cNegacionParserRuleCall_0; }
		
		//(POTENCIA potenciacion)?
		public Group getGroup_1() { return cGroup_1; }
		
		//POTENCIA
		public RuleCall getPOTENCIATerminalRuleCall_1_0() { return cPOTENCIATerminalRuleCall_1_0; }
		
		//potenciacion
		public RuleCall getPotenciacionParserRuleCall_1_1() { return cPotenciacionParserRuleCall_1_1; }
	}
	public class NegacionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.negacion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cNOKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cNOTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cParentesisParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//negacion:
		//	('NO' | NO)* parentesis;
		@Override public ParserRule getRule() { return rule; }
		
		//('NO' | NO)* parentesis
		public Group getGroup() { return cGroup; }
		
		//('NO' | NO)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'NO'
		public Keyword getNOKeyword_0_0() { return cNOKeyword_0_0; }
		
		//NO
		public RuleCall getNOTerminalRuleCall_0_1() { return cNOTerminalRuleCall_0_1; }
		
		//parentesis
		public RuleCall getParentesisParserRuleCall_1() { return cParentesisParserRuleCall_1; }
	}
	public class ParentesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.parentesis");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIZQUIERDOTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpresionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cDERECHOTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cDatoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//parentesis:
		//	IZQUIERDO expresion DERECHO
		//	| dato;
		@Override public ParserRule getRule() { return rule; }
		
		//IZQUIERDO expresion DERECHO | dato
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IZQUIERDO expresion DERECHO
		public Group getGroup_0() { return cGroup_0; }
		
		//IZQUIERDO
		public RuleCall getIZQUIERDOTerminalRuleCall_0_0() { return cIZQUIERDOTerminalRuleCall_0_0; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_0_1() { return cExpresionParserRuleCall_0_1; }
		
		//DERECHO
		public RuleCall getDERECHOTerminalRuleCall_0_2() { return cDERECHOTerminalRuleCall_0_2; }
		
		//dato
		public RuleCall getDatoParserRuleCall_1() { return cDatoParserRuleCall_1; }
	}
	public class DatoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.dato");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTIFICADORTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cCUADRADOITerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cExpresionParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cListaArregloParserRuleCall_0_1_2 = (RuleCall)cGroup_0_1.eContents().get(2);
		private final RuleCall cCUADRADODTerminalRuleCall_0_1_3 = (RuleCall)cGroup_0_1.eContents().get(3);
		private final RuleCall cNumeroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFRASETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//dato:
		//	IDENTIFICADOR (CUADRADOI expresion listaArreglo CUADRADOD)?
		//	| numero
		//	| logico
		//	| FRASE;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFICADOR (CUADRADOI expresion listaArreglo CUADRADOD)? | numero | logico | FRASE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFICADOR (CUADRADOI expresion listaArreglo CUADRADOD)?
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFICADOR
		public RuleCall getIDENTIFICADORTerminalRuleCall_0_0() { return cIDENTIFICADORTerminalRuleCall_0_0; }
		
		//(CUADRADOI expresion listaArreglo CUADRADOD)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//CUADRADOI
		public RuleCall getCUADRADOITerminalRuleCall_0_1_0() { return cCUADRADOITerminalRuleCall_0_1_0; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_0_1_1() { return cExpresionParserRuleCall_0_1_1; }
		
		//listaArreglo
		public RuleCall getListaArregloParserRuleCall_0_1_2() { return cListaArregloParserRuleCall_0_1_2; }
		
		//CUADRADOD
		public RuleCall getCUADRADODTerminalRuleCall_0_1_3() { return cCUADRADODTerminalRuleCall_0_1_3; }
		
		//numero
		public RuleCall getNumeroParserRuleCall_1() { return cNumeroParserRuleCall_1; }
		
		//logico
		public RuleCall getLogicoParserRuleCall_2() { return cLogicoParserRuleCall_2; }
		
		//FRASE
		public RuleCall getFRASETerminalRuleCall_3() { return cFRASETerminalRuleCall_3; }
	}
	public class LogicoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.logico");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVERDADEROTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFALSOTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//logico:
		//	VERDADERO
		//	| FALSO;
		@Override public ParserRule getRule() { return rule; }
		
		//VERDADERO | FALSO
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VERDADERO
		public RuleCall getVERDADEROTerminalRuleCall_0() { return cVERDADEROTerminalRuleCall_0; }
		
		//FALSO
		public RuleCall getFALSOTerminalRuleCall_1() { return cFALSOTerminalRuleCall_1; }
	}
	public class NumeroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.numero");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cENTEROTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNREALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//numero:
		//	ENTERO
		//	| NREAL;
		@Override public ParserRule getRule() { return rule; }
		
		//ENTERO | NREAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ENTERO
		public RuleCall getENTEROTerminalRuleCall_0() { return cENTEROTerminalRuleCall_0; }
		
		//NREAL
		public RuleCall getNREALTerminalRuleCall_1() { return cNREALTerminalRuleCall_1; }
	}
	public class ListaArregloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.listaArreglo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpresionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cListaArregloParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//listaArreglo:
		//	(';' expresion listaArreglo)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(';' expresion listaArreglo)?
		public Group getGroup() { return cGroup; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_1() { return cExpresionParserRuleCall_1; }
		
		//listaArreglo
		public RuleCall getListaArregloParserRuleCall_2() { return cListaArregloParserRuleCall_2; }
	}
	public class ListaCondicionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.listaCondicional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListaCondicionalAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cOSIKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cSINOTerminalRuleCall_1_0_0_1 = (RuleCall)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cExpresionParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Keyword cColonKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cIAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cIInstruccionesParserRuleCall_1_0_3_0 = (RuleCall)cIAssignment_1_0_3.eContents().get(0);
		private final Assignment cLAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cLListaCondicionalParserRuleCall_1_0_4_0 = (RuleCall)cLAssignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cENOTROCASOKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOTROCASOTerminalRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cIAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cIInstruccionesParserRuleCall_1_1_2_0 = (RuleCall)cIAssignment_1_1_2.eContents().get(0);
		
		//listaCondicional:
		//	{listaCondicional} (('O SI' | SINO) expresion ':'
		//	i=instrucciones l=listaCondicional
		//	| ('EN OTRO CASO' | OTROCASO)
		//	':' i=instrucciones)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{listaCondicional} (('O SI' | SINO) expresion ':' i=instrucciones l=listaCondicional | ('EN OTRO CASO' | OTROCASO) ':'
		//i=instrucciones)?
		public Group getGroup() { return cGroup; }
		
		//{listaCondicional}
		public Action getListaCondicionalAction_0() { return cListaCondicionalAction_0; }
		
		//(('O SI' | SINO) expresion ':' i=instrucciones l=listaCondicional | ('EN OTRO CASO' | OTROCASO) ':' i=instrucciones)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('O SI' | SINO) expresion ':' i=instrucciones l=listaCondicional
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'O SI' | SINO
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'O SI'
		public Keyword getOSIKeyword_1_0_0_0() { return cOSIKeyword_1_0_0_0; }
		
		//SINO
		public RuleCall getSINOTerminalRuleCall_1_0_0_1() { return cSINOTerminalRuleCall_1_0_0_1; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_1_0_1() { return cExpresionParserRuleCall_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_1_0_2() { return cColonKeyword_1_0_2; }
		
		//i=instrucciones
		public Assignment getIAssignment_1_0_3() { return cIAssignment_1_0_3; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_0_3_0() { return cIInstruccionesParserRuleCall_1_0_3_0; }
		
		//l=listaCondicional
		public Assignment getLAssignment_1_0_4() { return cLAssignment_1_0_4; }
		
		//listaCondicional
		public RuleCall getLListaCondicionalParserRuleCall_1_0_4_0() { return cLListaCondicionalParserRuleCall_1_0_4_0; }
		
		//('EN OTRO CASO' | OTROCASO) ':' i=instrucciones
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'EN OTRO CASO' | OTROCASO
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//'EN OTRO CASO'
		public Keyword getENOTROCASOKeyword_1_1_0_0() { return cENOTROCASOKeyword_1_1_0_0; }
		
		//OTROCASO
		public RuleCall getOTROCASOTerminalRuleCall_1_1_0_1() { return cOTROCASOTerminalRuleCall_1_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//i=instrucciones
		public Assignment getIAssignment_1_1_2() { return cIAssignment_1_1_2; }
		
		//instrucciones
		public RuleCall getIInstruccionesParserRuleCall_1_1_2_0() { return cIInstruccionesParserRuleCall_1_1_2_0; }
	}
	public class ListaImpresionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.listaImpresion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpresionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cListaImpresionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//listaImpresion:
		//	(';'
		//	expresion
		//	listaImpresion)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(';' expresion listaImpresion)?
		public Group getGroup() { return cGroup; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//expresion
		public RuleCall getExpresionParserRuleCall_1() { return cExpresionParserRuleCall_1; }
		
		//listaImpresion
		public RuleCall getListaImpresionParserRuleCall_2() { return cListaImpresionParserRuleCall_2; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final DeclaracionesElements pDeclaraciones;
	private final ParametrosElements pParametros;
	private final Exporta2Elements pExporta2;
	private final ListaParametrosElements pListaParametros;
	private final InstruccionesElements pInstrucciones;
	private final NominacionElements pNominacion;
	private final ArregloElements pArreglo;
	private final LlamadaIdentificadorElements pLlamadaIdentificador;
	private final CondicionalElements pCondicional;
	private final CicloElements pCiclo;
	private final ImpresionElements pImpresion;
	private final EntradaElements pEntrada;
	private final TipoVariableElements pTipoVariable;
	private final IgualdadElements pIgualdad;
	private final ListaIdentificadoresElements pListaIdentificadores;
	private final ExpresionElements pExpresion;
	private final OperacionOYElements pOperacionOY;
	private final ComparacionElements pComparacion;
	private final OpcomparacionElements pOpcomparacion;
	private final AritmeticaElements pAritmetica;
	private final Multiplicacion_Elements pMultiplicacion_;
	private final PotenciacionElements pPotenciacion;
	private final NegacionElements pNegacion;
	private final ParentesisElements pParentesis;
	private final DatoElements pDato;
	private final LogicoElements pLogico;
	private final NumeroElements pNumero;
	private final ListaArregloElements pListaArreglo;
	private final ListaCondicionalElements pListaCondicional;
	private final ListaImpresionElements pListaImpresion;
	private final TerminalRule tLINE_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tPROCEDIMIENTO;
	private final TerminalRule tIMPORTA;
	private final TerminalRule tEXPORTA;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tCONSTANTE;
	private final TerminalRule tENTERA;
	private final TerminalRule tREAL;
	private final TerminalRule tLOGICA;
	private final TerminalRule tCARACTERES;
	private final TerminalRule tSIGNOY;
	private final TerminalRule tSIGNOO;
	private final TerminalRule tMENOR;
	private final TerminalRule tSIGNOMENOR;
	private final TerminalRule tMENORIGUAL;
	private final TerminalRule tSIGNOMENORIGUAL;
	private final TerminalRule tMAYOR;
	private final TerminalRule tSIGNOMAYOR;
	private final TerminalRule tMAYORIGUAL;
	private final TerminalRule tSIGNOMAYORIGUAL;
	private final TerminalRule tIGUAL;
	private final TerminalRule tSIGNOIGUAL;
	private final TerminalRule tDIFERENTE;
	private final TerminalRule tSIGNODIFERENTE;
	private final TerminalRule tSUMA;
	private final TerminalRule tRESTA;
	private final TerminalRule tMULTIPLICACION;
	private final TerminalRule tDIVISION;
	private final TerminalRule tMODULO;
	private final TerminalRule tPOTENCIA;
	private final TerminalRule tNO;
	private final TerminalRule tIZQUIERDO;
	private final TerminalRule tDERECHO;
	private final TerminalRule tENTERO;
	private final TerminalRule tNREAL;
	private final TerminalRule tVERDADERO;
	private final TerminalRule tFALSO;
	private final TerminalRule tFRASE;
	private final TerminalRule tAREGLO;
	private final TerminalRule tCUADRADOI;
	private final TerminalRule tCUADRADOD;
	private final TerminalRule tSI;
	private final TerminalRule tES;
	private final TerminalRule tSINO;
	private final TerminalRule tOTROCASO;
	private final TerminalRule tREPETIR;
	private final TerminalRule tMIENTRAS;
	private final TerminalRule tSEA;
	private final TerminalRule tVECES;
	private final TerminalRule tFIN;
	private final TerminalRule tIMPRIMIR;
	private final TerminalRule tCAPTURAR;
	private final TerminalRule tIDENTIFICADOR;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LinitGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pDeclaraciones = new DeclaracionesElements();
		this.pParametros = new ParametrosElements();
		this.pExporta2 = new Exporta2Elements();
		this.pListaParametros = new ListaParametrosElements();
		this.pInstrucciones = new InstruccionesElements();
		this.pNominacion = new NominacionElements();
		this.pArreglo = new ArregloElements();
		this.pLlamadaIdentificador = new LlamadaIdentificadorElements();
		this.pCondicional = new CondicionalElements();
		this.pCiclo = new CicloElements();
		this.pImpresion = new ImpresionElements();
		this.pEntrada = new EntradaElements();
		this.pTipoVariable = new TipoVariableElements();
		this.pIgualdad = new IgualdadElements();
		this.pListaIdentificadores = new ListaIdentificadoresElements();
		this.pExpresion = new ExpresionElements();
		this.pOperacionOY = new OperacionOYElements();
		this.pComparacion = new ComparacionElements();
		this.pOpcomparacion = new OpcomparacionElements();
		this.pAritmetica = new AritmeticaElements();
		this.pMultiplicacion_ = new Multiplicacion_Elements();
		this.pPotenciacion = new PotenciacionElements();
		this.pNegacion = new NegacionElements();
		this.pParentesis = new ParentesisElements();
		this.pDato = new DatoElements();
		this.pLogico = new LogicoElements();
		this.pNumero = new NumeroElements();
		this.pListaArreglo = new ListaArregloElements();
		this.pListaCondicional = new ListaCondicionalElements();
		this.pListaImpresion = new ListaImpresionElements();
		this.tLINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.LINE_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.WS");
		this.tPROCEDIMIENTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.PROCEDIMIENTO");
		this.tIMPORTA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.IMPORTA");
		this.tEXPORTA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.EXPORTA");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.VARIABLE");
		this.tCONSTANTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.CONSTANTE");
		this.tENTERA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.ENTERA");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.REAL");
		this.tLOGICA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.LOGICA");
		this.tCARACTERES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.CARACTERES");
		this.tSIGNOY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SIGNOY");
		this.tSIGNOO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SIGNOO");
		this.tMENOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.MENOR");
		this.tSIGNOMENOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SIGNOMENOR");
		this.tMENORIGUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.MENORIGUAL");
		this.tSIGNOMENORIGUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SIGNOMENORIGUAL");
		this.tMAYOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.MAYOR");
		this.tSIGNOMAYOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SIGNOMAYOR");
		this.tMAYORIGUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.MAYORIGUAL");
		this.tSIGNOMAYORIGUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SIGNOMAYORIGUAL");
		this.tIGUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.IGUAL");
		this.tSIGNOIGUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SIGNOIGUAL");
		this.tDIFERENTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.DIFERENTE");
		this.tSIGNODIFERENTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SIGNODIFERENTE");
		this.tSUMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SUMA");
		this.tRESTA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.RESTA");
		this.tMULTIPLICACION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.MULTIPLICACION");
		this.tDIVISION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.DIVISION");
		this.tMODULO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.MODULO");
		this.tPOTENCIA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.POTENCIA");
		this.tNO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.NO");
		this.tIZQUIERDO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.IZQUIERDO");
		this.tDERECHO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.DERECHO");
		this.tENTERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.ENTERO");
		this.tNREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.NREAL");
		this.tVERDADERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.VERDADERO");
		this.tFALSO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.FALSO");
		this.tFRASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.FRASE");
		this.tAREGLO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.AREGLO");
		this.tCUADRADOI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.CUADRADOI");
		this.tCUADRADOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.CUADRADOD");
		this.tSI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SI");
		this.tES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.ES");
		this.tSINO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SINO");
		this.tOTROCASO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.OTROCASO");
		this.tREPETIR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.REPETIR");
		this.tMIENTRAS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.MIENTRAS");
		this.tSEA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.SEA");
		this.tVECES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.VECES");
		this.tFIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.FIN");
		this.tIMPRIMIR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.IMPRIMIR");
		this.tCAPTURAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.CAPTURAR");
		this.tIDENTIFICADOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "linit.Linit.IDENTIFICADOR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("linit.Linit".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//programa:
	//	d=declaraciones i=instrucciones;
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//declaraciones:
	//	(('PROCEDIMIENTO' | PROCEDIMIENTO) IDENTIFICADOR
	//	parametros
	//	':'
	//	i=instrucciones ('FIN' | FIN)
	//	'.'
	//	d=declaraciones)?;
	public DeclaracionesElements getDeclaracionesAccess() {
		return pDeclaraciones;
	}
	
	public ParserRule getDeclaracionesRule() {
		return getDeclaracionesAccess().getRule();
	}
	
	//parametros:
	//	('IMPORTA' | IMPORTA) (('VARIABLE' | VARIABLE) tipoVariable
	//	IDENTIFICADOR | arreglo) listaParametros
	//	exporta2
	//	| exporta2;
	public ParametrosElements getParametrosAccess() {
		return pParametros;
	}
	
	public ParserRule getParametrosRule() {
		return getParametrosAccess().getRule();
	}
	
	//exporta2:
	//	(('EXPORTA' | EXPORTA) (('VARIABLE' | VARIABLE) tipoVariable
	//	IDENTIFICADOR | arreglo) listaParametros)?;
	public Exporta2Elements getExporta2Access() {
		return pExporta2;
	}
	
	public ParserRule getExporta2Rule() {
		return getExporta2Access().getRule();
	}
	
	//listaParametros:
	//	(';' (tipoVariable
	//	IDENTIFICADOR | arreglo) listaParametros)?;
	public ListaParametrosElements getListaParametrosAccess() {
		return pListaParametros;
	}
	
	public ParserRule getListaParametrosRule() {
		return getListaParametrosAccess().getRule();
	}
	
	//instrucciones:
	//	{instrucciones} (nominacion '.' i=instrucciones
	//	| arreglo '.' i=instrucciones
	//	| llamadaIdentificador '.' i=instrucciones
	//	| c=condicional '.' i=instrucciones
	//	| f+=ciclo '.' i=instrucciones
	//	| impresion '.' i=instrucciones
	//	| entrada '.' i=instrucciones)?;
	public InstruccionesElements getInstruccionesAccess() {
		return pInstrucciones;
	}
	
	public ParserRule getInstruccionesRule() {
		return getInstruccionesAccess().getRule();
	}
	
	//nominacion:
	//	('VARIABLE' | VARIABLE) tipoVariable
	//	IDENTIFICADOR
	//	igualdad?
	//	| ('CONSTANTE' | CONSTANTE) tipoVariable
	//	IDENTIFICADOR
	//	igualdad;
	public NominacionElements getNominacionAccess() {
		return pNominacion;
	}
	
	public ParserRule getNominacionRule() {
		return getNominacionAccess().getRule();
	}
	
	//arreglo:
	//	('ARREGLO' | AREGLO) ('VARIABLE' | VARIABLE) IDENTIFICADOR;
	public ArregloElements getArregloAccess() {
		return pArreglo;
	}
	
	public ParserRule getArregloRule() {
		return getArregloAccess().getRule();
	}
	
	//llamadaIdentificador:
	//	IDENTIFICADOR (CUADRADOI
	//	expresion listaArreglo
	//	CUADRADOD)?
	//	igualdad
	//	| IDENTIFICADOR (('IMPORTA' | IMPORTA) expresion
	//	listaArreglo)? (('EXPORTA' | EXPORTA) IDENTIFICADOR
	//	listaIdentificadores)?;
	public LlamadaIdentificadorElements getLlamadaIdentificadorAccess() {
		return pLlamadaIdentificador;
	}
	
	public ParserRule getLlamadaIdentificadorRule() {
		return getLlamadaIdentificadorAccess().getRule();
	}
	
	//condicional:
	//	('SI' | SI) expresion ':'
	//	i=instrucciones
	//	l=listaCondicional ('FIN' | FIN);
	public CondicionalElements getCondicionalAccess() {
		return pCondicional;
	}
	
	public ParserRule getCondicionalRule() {
		return getCondicionalAccess().getRule();
	}
	
	//ciclo:
	//	('REPETIR' | REPETIR) expresion ('VECES' | VECES)
	//	':'
	//	instrucciones ('FIN' | FIN) | ('REPETIR' | REPETIR) ('MIENTRAS' | MIENTRAS) expresion ('SEA' | SEA) logico
	//	':'
	//	instrucciones ('FIN' | FIN);
	public CicloElements getCicloAccess() {
		return pCiclo;
	}
	
	public ParserRule getCicloRule() {
		return getCicloAccess().getRule();
	}
	
	//impresion:
	//	('IMPRIMIR EN CONSOLA' | IMPRIMIR) expresion
	//	listaImpresion;
	public ImpresionElements getImpresionAccess() {
		return pImpresion;
	}
	
	public ParserRule getImpresionRule() {
		return getImpresionAccess().getRule();
	}
	
	//entrada:
	//	('CAPTURAR DE CONSOLA' | CAPTURAR) IDENTIFICADOR;
	public EntradaElements getEntradaAccess() {
		return pEntrada;
	}
	
	public ParserRule getEntradaRule() {
		return getEntradaAccess().getRule();
	}
	
	//tipoVariable:
	//	('ENTERA' | ENTERA) | ('REAL' | REAL) | ('LOGICA' | LOGICA) | ('DE CARACTERES' | CARACTERES);
	public TipoVariableElements getTipoVariableAccess() {
		return pTipoVariable;
	}
	
	public ParserRule getTipoVariableRule() {
		return getTipoVariableAccess().getRule();
	}
	
	//igualdad:
	//	('ES IGUAL A' | IGUAL) expresion
	//	| SIGNOIGUAL
	//	expresion;
	public IgualdadElements getIgualdadAccess() {
		return pIgualdad;
	}
	
	public ParserRule getIgualdadRule() {
		return getIgualdadAccess().getRule();
	}
	
	//listaIdentificadores:
	//	(';' IDENTIFICADOR listaIdentificadores)?;
	public ListaIdentificadoresElements getListaIdentificadoresAccess() {
		return pListaIdentificadores;
	}
	
	public ParserRule getListaIdentificadoresRule() {
		return getListaIdentificadoresAccess().getRule();
	}
	
	//expresion:
	//	operacionOY;
	public ExpresionElements getExpresionAccess() {
		return pExpresion;
	}
	
	public ParserRule getExpresionRule() {
		return getExpresionAccess().getRule();
	}
	
	//operacionOY:
	//	comparacion (('Y' | SIGNOY | 'O' | SIGNOO) operacionOY)?;
	public OperacionOYElements getOperacionOYAccess() {
		return pOperacionOY;
	}
	
	public ParserRule getOperacionOYRule() {
		return getOperacionOYAccess().getRule();
	}
	
	//comparacion:
	//	aritmetica (opcomparacion comparacion)?;
	public ComparacionElements getComparacionAccess() {
		return pComparacion;
	}
	
	public ParserRule getComparacionRule() {
		return getComparacionAccess().getRule();
	}
	
	//opcomparacion:
	//	(('ES MENOR A' | MENOR) | SIGNOMENOR) | (('ES MENOR O IGUAL A' | MENORIGUAL) | SIGNOMENORIGUAL) | (('ES MAYOR A' |
	//	MAYOR) | SIGNOMAYOR) | (('ES MAYOR O IGUAL A' | MAYORIGUAL) | SIGNOMAYORIGUAL) | (('ES DIFERENTE DE A' | DIFERENTE) |
	//	SIGNODIFERENTE) | (('ES IGUAL A' | IGUAL) | SIGNOIGUAL);
	public OpcomparacionElements getOpcomparacionAccess() {
		return pOpcomparacion;
	}
	
	public ParserRule getOpcomparacionRule() {
		return getOpcomparacionAccess().getRule();
	}
	
	//aritmetica:
	//	multiplicacion_ ((SUMA | RESTA) aritmetica)?;
	public AritmeticaElements getAritmeticaAccess() {
		return pAritmetica;
	}
	
	public ParserRule getAritmeticaRule() {
		return getAritmeticaAccess().getRule();
	}
	
	//multiplicacion_:
	//	potenciacion ((MULTIPLICACION | DIVISION | MODULO) multiplicacion_)?;
	public Multiplicacion_Elements getMultiplicacion_Access() {
		return pMultiplicacion_;
	}
	
	public ParserRule getMultiplicacion_Rule() {
		return getMultiplicacion_Access().getRule();
	}
	
	//potenciacion:
	//	negacion (POTENCIA potenciacion)?;
	public PotenciacionElements getPotenciacionAccess() {
		return pPotenciacion;
	}
	
	public ParserRule getPotenciacionRule() {
		return getPotenciacionAccess().getRule();
	}
	
	//negacion:
	//	('NO' | NO)* parentesis;
	public NegacionElements getNegacionAccess() {
		return pNegacion;
	}
	
	public ParserRule getNegacionRule() {
		return getNegacionAccess().getRule();
	}
	
	//parentesis:
	//	IZQUIERDO expresion DERECHO
	//	| dato;
	public ParentesisElements getParentesisAccess() {
		return pParentesis;
	}
	
	public ParserRule getParentesisRule() {
		return getParentesisAccess().getRule();
	}
	
	//dato:
	//	IDENTIFICADOR (CUADRADOI expresion listaArreglo CUADRADOD)?
	//	| numero
	//	| logico
	//	| FRASE;
	public DatoElements getDatoAccess() {
		return pDato;
	}
	
	public ParserRule getDatoRule() {
		return getDatoAccess().getRule();
	}
	
	//logico:
	//	VERDADERO
	//	| FALSO;
	public LogicoElements getLogicoAccess() {
		return pLogico;
	}
	
	public ParserRule getLogicoRule() {
		return getLogicoAccess().getRule();
	}
	
	//numero:
	//	ENTERO
	//	| NREAL;
	public NumeroElements getNumeroAccess() {
		return pNumero;
	}
	
	public ParserRule getNumeroRule() {
		return getNumeroAccess().getRule();
	}
	
	//listaArreglo:
	//	(';' expresion listaArreglo)?;
	public ListaArregloElements getListaArregloAccess() {
		return pListaArreglo;
	}
	
	public ParserRule getListaArregloRule() {
		return getListaArregloAccess().getRule();
	}
	
	//listaCondicional:
	//	{listaCondicional} (('O SI' | SINO) expresion ':'
	//	i=instrucciones l=listaCondicional
	//	| ('EN OTRO CASO' | OTROCASO)
	//	':' i=instrucciones)?;
	public ListaCondicionalElements getListaCondicionalAccess() {
		return pListaCondicional;
	}
	
	public ParserRule getListaCondicionalRule() {
		return getListaCondicionalAccess().getRule();
	}
	
	//listaImpresion:
	//	(';'
	//	expresion
	//	listaImpresion)?;
	public ListaImpresionElements getListaImpresionAccess() {
		return pListaImpresion;
	}
	
	public ParserRule getListaImpresionRule() {
		return getListaImpresionAccess().getRule();
	}
	
	//terminal LINE_COMMENT:
	//	'>>' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getLINE_COMMENTRule() {
		return tLINE_COMMENT;
	}
	
	//@ Override terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal PROCEDIMIENTO:
	//	'P' ('R' | 'r') ('O' | 'o') ('C' | 'c') ('E' | 'e') ('D' | 'd') ('I' | 'i') ('M' | 'm') ('I' | 'i') ('E' | 'e') ('N'
	//	| 'n') ('T' | 't') ('O' | 'o');
	public TerminalRule getPROCEDIMIENTORule() {
		return tPROCEDIMIENTO;
	}
	
	//terminal IMPORTA:
	//	'I' ('M' | 'm') ('P' | 'p') ('O' | 'o') ('R' | 'r') ('T' | 't') ('A' | 'a');
	public TerminalRule getIMPORTARule() {
		return tIMPORTA;
	}
	
	//terminal EXPORTA:
	//	'E' ('X' | 'x') ('P' | 'p') ('O' | 'o') ('R' | 'r') ('T' | 't') ('A' | 'a');
	public TerminalRule getEXPORTARule() {
		return tEXPORTA;
	}
	
	//terminal VARIABLE:
	//	'V' ('A' | 'a') ('R' | 'r') ('I' | 'i') ('A' | 'a') ('B' | 'b') ('L' | 'l') ('E' | 'e');
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal CONSTANTE:
	//	'C' ('O' | 'o') ('N' | 'n') ('S' | 's') ('T' | 't') ('A' | 'a') ('N' | 'n') ('T' | 't') ('E' | 'e');
	public TerminalRule getCONSTANTERule() {
		return tCONSTANTE;
	}
	
	//terminal ENTERA:
	//	'E' ('N' | 'n') ('T' | 't') ('E' | 'e') ('R' | 'r') ('A' | 'a');
	public TerminalRule getENTERARule() {
		return tENTERA;
	}
	
	//terminal REAL:
	//	'R' ('E' | 'e') ('A' | 'a') ('L' | 'l');
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal LOGICA:
	//	'L' ('O' | 'o') ('G' | 'g') ('I' | 'i') ('C' | 'c') ('A' | 'a');
	public TerminalRule getLOGICARule() {
		return tLOGICA;
	}
	
	//terminal CARACTERES:
	//	'D' ('E' | 'e') ' ' 'C' ('A' | 'a') ('R' | 'r') ('A' | 'a') ('C' | 'c') ('T' | 't') ('E' | 'e') ('R' | 'r') ('E' |
	//	'e') ('S' | 's');
	public TerminalRule getCARACTERESRule() {
		return tCARACTERES;
	}
	
	//terminal SIGNOY:
	//	'/\\';
	public TerminalRule getSIGNOYRule() {
		return tSIGNOY;
	}
	
	//terminal SIGNOO:
	//	'\\/';
	public TerminalRule getSIGNOORule() {
		return tSIGNOO;
	}
	
	//terminal MENOR:
	//	'E' ('S' | 's') ' ' 'M' ('E' | 'e') ('N' | 'n') ('O' | 'o') ('R' | 'r');
	public TerminalRule getMENORRule() {
		return tMENOR;
	}
	
	//terminal SIGNOMENOR:
	//	'<';
	public TerminalRule getSIGNOMENORRule() {
		return tSIGNOMENOR;
	}
	
	//terminal MENORIGUAL:
	//	'E' ('S' | 's') ' ' 'M' ('E' | 'e') ('N' | 'n') ('O' | 'o') ('R' | 'r') ' ' 'O' ' ' 'I' ('G' | 'g') ('U' | 'u') ('A'
	//	| 'a') ('L' | 'l');
	public TerminalRule getMENORIGUALRule() {
		return tMENORIGUAL;
	}
	
	//terminal SIGNOMENORIGUAL:
	//	'<=';
	public TerminalRule getSIGNOMENORIGUALRule() {
		return tSIGNOMENORIGUAL;
	}
	
	//terminal MAYOR:
	//	'E' ('S' | 's') ' ' 'M' ('A' | 'a') ('Y' | 'y') ('O' | 'o') ('R' | 'r');
	public TerminalRule getMAYORRule() {
		return tMAYOR;
	}
	
	//terminal SIGNOMAYOR:
	//	'>';
	public TerminalRule getSIGNOMAYORRule() {
		return tSIGNOMAYOR;
	}
	
	//terminal MAYORIGUAL:
	//	'E' ('S' | 's') ' ' 'M' ('A' | 'a') ('Y' | 'y') ('O' | 'o') ('R' | 'r') ' ' 'O' ' ' 'I' ('G' | 'g') ('U' | 'u') ('A'
	//	| 'a') ('L' | 'l');
	public TerminalRule getMAYORIGUALRule() {
		return tMAYORIGUAL;
	}
	
	//terminal SIGNOMAYORIGUAL:
	//	'>=';
	public TerminalRule getSIGNOMAYORIGUALRule() {
		return tSIGNOMAYORIGUAL;
	}
	
	//terminal IGUAL:
	//	'E' ('S' | 's') ' ' 'I' ('G' | 'g') ('U' | 'u') ('A' | 'a') ('L' | 'l') ' ' 'A';
	public TerminalRule getIGUALRule() {
		return tIGUAL;
	}
	
	//terminal SIGNOIGUAL:
	//	'=';
	public TerminalRule getSIGNOIGUALRule() {
		return tSIGNOIGUAL;
	}
	
	//terminal DIFERENTE:
	//	'E' ('S' | 's') ' ' 'D' ('I' | 'i') ('F' | 'f') ('E' | 'e') ('R' | 'r') ('E' | 'e') ('N' | 'n') ('T' | 't') ('E' |
	//	'e') ' ' 'D' ('E' | 'e');
	public TerminalRule getDIFERENTERule() {
		return tDIFERENTE;
	}
	
	//terminal SIGNODIFERENTE:
	//	'/=';
	public TerminalRule getSIGNODIFERENTERule() {
		return tSIGNODIFERENTE;
	}
	
	//terminal SUMA:
	//	'+';
	public TerminalRule getSUMARule() {
		return tSUMA;
	}
	
	//terminal RESTA:
	//	'-';
	public TerminalRule getRESTARule() {
		return tRESTA;
	}
	
	//terminal MULTIPLICACION:
	//	'*';
	public TerminalRule getMULTIPLICACIONRule() {
		return tMULTIPLICACION;
	}
	
	//terminal DIVISION:
	//	'/';
	public TerminalRule getDIVISIONRule() {
		return tDIVISION;
	}
	
	//terminal MODULO:
	//	'M' ('O' | 'o') ('D' | 'd') ('U' | 'u') ('L' | 'l') ('O' | 'o');
	public TerminalRule getMODULORule() {
		return tMODULO;
	}
	
	//terminal POTENCIA:
	//	'**';
	public TerminalRule getPOTENCIARule() {
		return tPOTENCIA;
	}
	
	//terminal NO:
	//	'N' ('O' | 'o') ' ' 'S' ('U' | 'u') ('C' | 'c') ('E' | 'e') ('D' | 'd') ('E' | 'e');
	public TerminalRule getNORule() {
		return tNO;
	}
	
	//terminal IZQUIERDO:
	//	'(';
	public TerminalRule getIZQUIERDORule() {
		return tIZQUIERDO;
	}
	
	//terminal DERECHO:
	//	')';
	public TerminalRule getDERECHORule() {
		return tDERECHO;
	}
	
	//terminal ENTERO:
	//	INT;
	public TerminalRule getENTERORule() {
		return tENTERO;
	}
	
	//terminal NREAL:
	//	'-'? '0'..'9'+ ',' '0'..'9'+;
	public TerminalRule getNREALRule() {
		return tNREAL;
	}
	
	//terminal VERDADERO:
	//	'V' ('E' | 'e') ('R' | 'r') ('D' | 'd') ('A' | 'a') ('D' | 'd') ('E' | 'e') ('R' | 'r') ('O' | 'o');
	public TerminalRule getVERDADERORule() {
		return tVERDADERO;
	}
	
	//terminal FALSO:
	//	'F' ('A' | 'a') ('L' | 'l') ('S' | 's') ('O' | 'o');
	public TerminalRule getFALSORule() {
		return tFALSO;
	}
	
	//terminal FRASE:
	//	'"' .* '"';
	public TerminalRule getFRASERule() {
		return tFRASE;
	}
	
	//terminal AREGLO:
	//	'A' ('R' | 'r') ('R' | 'r') ('E' | 'e') ('G' | 'g') ('L' | 'l') ('O' | 'o');
	public TerminalRule getAREGLORule() {
		return tAREGLO;
	}
	
	//terminal CUADRADOI:
	//	'[';
	public TerminalRule getCUADRADOIRule() {
		return tCUADRADOI;
	}
	
	//terminal CUADRADOD:
	//	']';
	public TerminalRule getCUADRADODRule() {
		return tCUADRADOD;
	}
	
	//terminal SI:
	//	'S' ('I' | 'i');
	public TerminalRule getSIRule() {
		return tSI;
	}
	
	//terminal ES:
	//	'E' ('S' | 's');
	public TerminalRule getESRule() {
		return tES;
	}
	
	//terminal SINO:
	//	'O' ' ' 'S' ('I' | 'i');
	public TerminalRule getSINORule() {
		return tSINO;
	}
	
	//terminal OTROCASO:
	//	'E' ('N' | 'n') ' ' 'O' ('T' | 't') ('R' | 'r') ('O' | 'o') ' ' 'C' ('A' | 'a') ('S' | 's') ('O' | 'o');
	public TerminalRule getOTROCASORule() {
		return tOTROCASO;
	}
	
	//terminal REPETIR:
	//	'R' ('E' | 'e') ('P' | 'p') ('E' | 'e') ('T' | 't') ('I' | 'i') ('R' | 'r');
	public TerminalRule getREPETIRRule() {
		return tREPETIR;
	}
	
	//terminal MIENTRAS:
	//	'M' ('I' | 'i') ('E' | 'e') ('N' | 'n') ('T' | 't') ('R' | 'r') ('A' | 'a') ('S' | 's');
	public TerminalRule getMIENTRASRule() {
		return tMIENTRAS;
	}
	
	//terminal SEA:
	//	'S' ('E' | 'e') ('A' | 'a');
	public TerminalRule getSEARule() {
		return tSEA;
	}
	
	//terminal VECES:
	//	'V' ('E' | 'e') ('C' | 'c') ('E' | 'e') ('S' | 's');
	public TerminalRule getVECESRule() {
		return tVECES;
	}
	
	//terminal FIN:
	//	'F' ('I' | 'i') ('N' | 'n');
	public TerminalRule getFINRule() {
		return tFIN;
	}
	
	//terminal IMPRIMIR:
	//	'I' ('M' | 'm') ('P' | 'p') ('R' | 'r') ('I' | 'i') ('M' | 'm') ('I' | 'i') ('R' | 'r') ' '+ 'E' ('N' | 'n') ' ' 'C'
	//	('O' | 'o') ('N' | 'n') ('S' | 's') ('O' | 'o') ('L' | 'l') ('A' | 'a');
	public TerminalRule getIMPRIMIRRule() {
		return tIMPRIMIR;
	}
	
	//terminal CAPTURAR:
	//	'C' ('A' | 'a') ('P' | 'p') ('T' | 't') ('U' | 'u') ('R' | 'r') ('A' | 'a') ('R' | 'r') ' ' 'D' ('E' | 'e')+ ' ' 'C'
	//	('O' | 'o') ('N' | 'n') ('S' | 's') ('O' | 'o') ('L' | 'l') ('A' | 'a');
	public TerminalRule getCAPTURARRule() {
		return tCAPTURAR;
	}
	
	//terminal IDENTIFICADOR:
	//	'a'..'z' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;
	public TerminalRule getIDENTIFICADORRule() {
		return tIDENTIFICADOR;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
