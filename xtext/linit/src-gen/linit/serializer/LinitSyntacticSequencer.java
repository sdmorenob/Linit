/*
 * generated by Xtext 2.12.0
 */
package linit.serializer;

import com.google.inject.Inject;
import java.util.List;
import linit.services.LinitGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LinitSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LinitGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ciclo_FINKeyword_0_5_0_or_FINTerminalRuleCall_0_5_1;
	protected AbstractElementAlias match_ciclo_____REPETIRKeyword_0_0_0_or_REPETIRTerminalRuleCall_0_0_1___ExpresionParserRuleCall_0_1___VECESKeyword_0_2_0_or_VECESTerminalRuleCall_0_2_1___ColonKeyword_0_3___or_____REPETIRKeyword_1_0_0_or_REPETIRTerminalRuleCall_1_0_1_____MIENTRASKeyword_1_1_0_or_MIENTRASTerminalRuleCall_1_1_1___ExpresionParserRuleCall_1_2___SEAKeyword_1_3_0_or_SEATerminalRuleCall_1_3_1___LogicoParserRuleCall_1_4_ColonKeyword_1_5__;
	protected AbstractElementAlias match_condicional_FINKeyword_5_0_or_FINTerminalRuleCall_5_1;
	protected AbstractElementAlias match_condicional_SIKeyword_0_0_or_SITerminalRuleCall_0_1;
	protected AbstractElementAlias match_declaraciones_FINKeyword_5_0_or_FINTerminalRuleCall_5_1;
	protected AbstractElementAlias match_declaraciones_PROCEDIMIENTOKeyword_0_0_or_PROCEDIMIENTOTerminalRuleCall_0_1;
	protected AbstractElementAlias match_listaCondicional_ENOTROCASOKeyword_1_1_0_0_or_OTROCASOTerminalRuleCall_1_1_0_1;
	protected AbstractElementAlias match_listaCondicional_OSIKeyword_1_0_0_0_or_SINOTerminalRuleCall_1_0_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LinitGrammarAccess) access;
		match_ciclo_FINKeyword_0_5_0_or_FINTerminalRuleCall_0_5_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCicloAccess().getFINKeyword_0_5_0()), new TokenAlias(false, false, grammarAccess.getCicloAccess().getFINTerminalRuleCall_0_5_1()));
		match_ciclo_____REPETIRKeyword_0_0_0_or_REPETIRTerminalRuleCall_0_0_1___ExpresionParserRuleCall_0_1___VECESKeyword_0_2_0_or_VECESTerminalRuleCall_0_2_1___ColonKeyword_0_3___or_____REPETIRKeyword_1_0_0_or_REPETIRTerminalRuleCall_1_0_1_____MIENTRASKeyword_1_1_0_or_MIENTRASTerminalRuleCall_1_1_1___ExpresionParserRuleCall_1_2___SEAKeyword_1_3_0_or_SEATerminalRuleCall_1_3_1___LogicoParserRuleCall_1_4_ColonKeyword_1_5__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCicloAccess().getREPETIRKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getCicloAccess().getREPETIRTerminalRuleCall_0_0_1())), new TokenAlias(false, false, grammarAccess.getCicloAccess().getExpresionParserRuleCall_0_1()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCicloAccess().getVECESKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getCicloAccess().getVECESTerminalRuleCall_0_2_1())), new TokenAlias(false, false, grammarAccess.getCicloAccess().getColonKeyword_0_3())), new GroupAlias(false, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCicloAccess().getREPETIRKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getCicloAccess().getREPETIRTerminalRuleCall_1_0_1())), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCicloAccess().getMIENTRASKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getCicloAccess().getMIENTRASTerminalRuleCall_1_1_1())), new TokenAlias(false, false, grammarAccess.getCicloAccess().getExpresionParserRuleCall_1_2()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCicloAccess().getSEAKeyword_1_3_0()), new TokenAlias(false, false, grammarAccess.getCicloAccess().getSEATerminalRuleCall_1_3_1())), new TokenAlias(false, false, grammarAccess.getCicloAccess().getLogicoParserRuleCall_1_4()), new TokenAlias(false, false, grammarAccess.getCicloAccess().getColonKeyword_1_5())));
		match_condicional_FINKeyword_5_0_or_FINTerminalRuleCall_5_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCondicionalAccess().getFINKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getCondicionalAccess().getFINTerminalRuleCall_5_1()));
		match_condicional_SIKeyword_0_0_or_SITerminalRuleCall_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCondicionalAccess().getSIKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getCondicionalAccess().getSITerminalRuleCall_0_1()));
		match_declaraciones_FINKeyword_5_0_or_FINTerminalRuleCall_5_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclaracionesAccess().getFINKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getDeclaracionesAccess().getFINTerminalRuleCall_5_1()));
		match_declaraciones_PROCEDIMIENTOKeyword_0_0_or_PROCEDIMIENTOTerminalRuleCall_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclaracionesAccess().getPROCEDIMIENTOKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDeclaracionesAccess().getPROCEDIMIENTOTerminalRuleCall_0_1()));
		match_listaCondicional_ENOTROCASOKeyword_1_1_0_0_or_OTROCASOTerminalRuleCall_1_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getListaCondicionalAccess().getENOTROCASOKeyword_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getListaCondicionalAccess().getOTROCASOTerminalRuleCall_1_1_0_1()));
		match_listaCondicional_OSIKeyword_1_0_0_0_or_SINOTerminalRuleCall_1_0_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getListaCondicionalAccess().getOSIKeyword_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getListaCondicionalAccess().getSINOTerminalRuleCall_1_0_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getFINRule())
			return getFINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDENTIFICADORRule())
			return getIDENTIFICADORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMIENTRASRule())
			return getMIENTRASToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOTROCASORule())
			return getOTROCASOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPROCEDIMIENTORule())
			return getPROCEDIMIENTOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREPETIRRule())
			return getREPETIRToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEARule())
			return getSEAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSIRule())
			return getSIToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSINORule())
			return getSINOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVECESRule())
			return getVECESToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getArregloRule())
			return getarregloToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEntradaRule())
			return getentradaToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getExpresionRule())
			return getexpresionToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getImpresionRule())
			return getimpresionToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLlamadaIdentificadorRule())
			return getllamadaIdentificadorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLogicoRule())
			return getlogicoToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNominacionRule())
			return getnominacionToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getParametrosRule())
			return getparametrosToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal FIN:
	 * 	('F')('I'|'i')('N'|'n')
	 * ;
	 */
	protected String getFINToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "FIN";
	}
	
	/**
	 * terminal IDENTIFICADOR:
	 * 	('a'..'z')('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
	 * ;
	 */
	protected String getIDENTIFICADORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal MIENTRAS:
	 * 	('M')('I'|'i')('E'|'e')('N'|'n')('T'|'t')('R'|'r')('A'|'a')('S'|'s')
	 * ;
	 */
	protected String getMIENTRASToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "MIENTRAS";
	}
	
	/**
	 * terminal OTROCASO:
	 * 	('E')('N'|'n')(' ')('O')('T'|'t')('R'|'r')('O'|'o')(' ')('C')('A'|'a')('S'|'s')('O'|'o')
	 * ;
	 */
	protected String getOTROCASOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "EN OTRO CASO";
	}
	
	/**
	 * terminal PROCEDIMIENTO:
	 * 	('P')('R'|'r')('O'|'o')('C'|'c')('E'|'e')('D'|'d')('I'|'i')('M'|'m')('I'|'i')('E'|'e')('N'|'n')('T'|'t')('O'|'o')
	 * ;
	 */
	protected String getPROCEDIMIENTOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "PROCEDIMIENTO";
	}
	
	/**
	 * terminal REPETIR:
	 * 	('R')('E'|'e')('P'|'p')('E'|'e')('T'|'t')('I'|'i')('R'|'r')
	 * ;
	 */
	protected String getREPETIRToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "REPETIR";
	}
	
	/**
	 * terminal SEA:
	 * 	('S')('E'|'e')('A'|'a')
	 * ;
	 */
	protected String getSEAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "SEA";
	}
	
	/**
	 * terminal SI:
	 * 	('S')('I'|'i')
	 * ;
	 */
	protected String getSIToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "SI";
	}
	
	/**
	 * terminal SINO:
	 * 	('O')(' ')('S')('I'|'i')
	 * ;
	 */
	protected String getSINOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "O SI";
	}
	
	/**
	 * terminal VECES:
	 * 	('V')('E'|'e')('C'|'c')('E'|'e')('S'|'s')
	 * ;
	 */
	protected String getVECESToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "VECES";
	}
	
	/**
	 * arreglo:
	 * 	( 'ARREGLO' | AREGLO )
	 * 	( 'VARIABLE' | VARIABLE)
	 * 	IDENTIFICADOR
	 * ;
	 */
	protected String getarregloToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ARREGLOVARIABLE";
	}
	
	/**
	 * entrada:
	 * 	( 'CAPTURAR DE CONSOLA' | CAPTURAR )
	 * 	IDENTIFICADOR
	 * ;
	 */
	protected String getentradaToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "CAPTURAR DE CONSOLA";
	}
	
	/**
	 * expresion:
	 * 	operacionOY
	 * ;
	 */
	protected String getexpresionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "()";
	}
	
	/**
	 * impresion:
	 * 	( 'IMPRIMIR EN CONSOLA' | IMPRIMIR )
	 * 	expresion
	 * 	listaImpresion
	 * ;
	 */
	protected String getimpresionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "IMPRIMIR EN CONSOLA()";
	}
	
	/**
	 * llamadaIdentificador:
	 * 	IDENTIFICADOR
	 * 	(
	 * 		CUADRADOI
	 * 		expresion listaArreglo
	 * 		CUADRADOD
	 * 	)?
	 * 	igualdad
	 *     |
	 *     IDENTIFICADOR
	 * 	(
	 * 		( 'IMPORTA' | IMPORTA )
	 * 		expresion
	 * 		listaArreglo
	 * 	)?
	 * 	(
	 * 		( 'EXPORTA' | EXPORTA )
	 * 		IDENTIFICADOR
	 * 		listaIdentificadores
	 * 	)?
	 * ;
	 */
	protected String getllamadaIdentificadorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ES IGUAL A()";
	}
	
	/**
	 * logico:
	 * 	( 'VERDADERO' | VERDADERO )
	 * 	|
	 * 	( 'FALSO' | FALSO )
	 * ;
	 */
	protected String getlogicoToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "VERDADERO";
	}
	
	/**
	 * nominacion:
	 * 	( 'VARIABLE' | VARIABLE )
	 * 	tipoVariable
	 * 	IDENTIFICADOR
	 * 	igualdad?
	 * 	|
	 * 	( 'CONSTANTE' | CONSTANTE )
	 * 	tipoVariable
	 * 	IDENTIFICADOR
	 * 	igualdad
	 * ;
	 */
	protected String getnominacionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "VARIABLEENTERA";
	}
	
	/**
	 * parametros:
	 * 	( 'IMPORTA' | IMPORTA )
	 * 	( ( 'VARIABLE' | VARIABLE)
	 * 	tipoVariable
	 * 	IDENTIFICADOR | arreglo )
	 * 	listaParametros
	 * 	exporta2
	 * 	|
	 * 	exporta2
	 * ;
	 */
	protected String getparametrosToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "IMPORTAVARIABLEENTERA";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ciclo_FINKeyword_0_5_0_or_FINTerminalRuleCall_0_5_1.equals(syntax))
				emit_ciclo_FINKeyword_0_5_0_or_FINTerminalRuleCall_0_5_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ciclo_____REPETIRKeyword_0_0_0_or_REPETIRTerminalRuleCall_0_0_1___ExpresionParserRuleCall_0_1___VECESKeyword_0_2_0_or_VECESTerminalRuleCall_0_2_1___ColonKeyword_0_3___or_____REPETIRKeyword_1_0_0_or_REPETIRTerminalRuleCall_1_0_1_____MIENTRASKeyword_1_1_0_or_MIENTRASTerminalRuleCall_1_1_1___ExpresionParserRuleCall_1_2___SEAKeyword_1_3_0_or_SEATerminalRuleCall_1_3_1___LogicoParserRuleCall_1_4_ColonKeyword_1_5__.equals(syntax))
				emit_ciclo_____REPETIRKeyword_0_0_0_or_REPETIRTerminalRuleCall_0_0_1___ExpresionParserRuleCall_0_1___VECESKeyword_0_2_0_or_VECESTerminalRuleCall_0_2_1___ColonKeyword_0_3___or_____REPETIRKeyword_1_0_0_or_REPETIRTerminalRuleCall_1_0_1_____MIENTRASKeyword_1_1_0_or_MIENTRASTerminalRuleCall_1_1_1___ExpresionParserRuleCall_1_2___SEAKeyword_1_3_0_or_SEATerminalRuleCall_1_3_1___LogicoParserRuleCall_1_4_ColonKeyword_1_5__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_condicional_FINKeyword_5_0_or_FINTerminalRuleCall_5_1.equals(syntax))
				emit_condicional_FINKeyword_5_0_or_FINTerminalRuleCall_5_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_condicional_SIKeyword_0_0_or_SITerminalRuleCall_0_1.equals(syntax))
				emit_condicional_SIKeyword_0_0_or_SITerminalRuleCall_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_declaraciones_FINKeyword_5_0_or_FINTerminalRuleCall_5_1.equals(syntax))
				emit_declaraciones_FINKeyword_5_0_or_FINTerminalRuleCall_5_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_declaraciones_PROCEDIMIENTOKeyword_0_0_or_PROCEDIMIENTOTerminalRuleCall_0_1.equals(syntax))
				emit_declaraciones_PROCEDIMIENTOKeyword_0_0_or_PROCEDIMIENTOTerminalRuleCall_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_listaCondicional_ENOTROCASOKeyword_1_1_0_0_or_OTROCASOTerminalRuleCall_1_1_0_1.equals(syntax))
				emit_listaCondicional_ENOTROCASOKeyword_1_1_0_0_or_OTROCASOTerminalRuleCall_1_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_listaCondicional_OSIKeyword_1_0_0_0_or_SINOTerminalRuleCall_1_0_0_1.equals(syntax))
				emit_listaCondicional_OSIKeyword_1_0_0_0_or_SINOTerminalRuleCall_1_0_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'FIN' | FIN
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ((('REPETIR' | REPETIR) expresion ('VECES' | VECES) ':') | (('REPETIR' | REPETIR) ('MIENTRAS' | MIENTRAS) expresion ('SEA' | SEA) logico ':')) (ambiguity) (rule start)
	 *     i=instrucciones (ambiguity) (rule end)
	 */
	protected void emit_ciclo_FINKeyword_0_5_0_or_FINTerminalRuleCall_0_5_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         (('REPETIR' | REPETIR) expresion ('VECES' | VECES) ':') | 
	  *         (
	  *             ('REPETIR' | REPETIR) 
	  *             ('MIENTRAS' | MIENTRAS) 
	  *             expresion 
	  *             ('SEA' | SEA) 
	  *             logico 
	  *             ':'
	  *         )
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('FIN' | FIN) (rule start)
	 *     (rule start) (ambiguity) arreglo '.' i=instrucciones
	 *     (rule start) (ambiguity) c=condicional
	 *     (rule start) (ambiguity) entrada '.' i=instrucciones
	 *     (rule start) (ambiguity) f+=ciclo
	 *     (rule start) (ambiguity) impresion '.' i=instrucciones
	 *     (rule start) (ambiguity) llamadaIdentificador '.' i=instrucciones
	 *     (rule start) (ambiguity) nominacion '.' i=instrucciones
	 */
	protected void emit_ciclo_____REPETIRKeyword_0_0_0_or_REPETIRTerminalRuleCall_0_0_1___ExpresionParserRuleCall_0_1___VECESKeyword_0_2_0_or_VECESTerminalRuleCall_0_2_1___ColonKeyword_0_3___or_____REPETIRKeyword_1_0_0_or_REPETIRTerminalRuleCall_1_0_1_____MIENTRASKeyword_1_1_0_or_MIENTRASTerminalRuleCall_1_1_1___ExpresionParserRuleCall_1_2___SEAKeyword_1_3_0_or_SEATerminalRuleCall_1_3_1___LogicoParserRuleCall_1_4_ColonKeyword_1_5__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'FIN' | FIN
	 *
	 * This ambiguous syntax occurs at:
	 *     l=listaCondicional (ambiguity) (rule end)
	 */
	protected void emit_condicional_FINKeyword_5_0_or_FINTerminalRuleCall_5_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'SI' | SI
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) expresion ':' i=instrucciones
	 */
	protected void emit_condicional_SIKeyword_0_0_or_SITerminalRuleCall_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'FIN' | FIN
	 *
	 * This ambiguous syntax occurs at:
	 *     i=instrucciones (ambiguity) '.' d=declaraciones
	 */
	protected void emit_declaraciones_FINKeyword_5_0_or_FINTerminalRuleCall_5_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'PROCEDIMIENTO' | PROCEDIMIENTO
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) IDENTIFICADOR parametros ':' i=instrucciones
	 */
	protected void emit_declaraciones_PROCEDIMIENTOKeyword_0_0_or_PROCEDIMIENTOTerminalRuleCall_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'EN OTRO CASO' | OTROCASO
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ':' i=instrucciones
	 */
	protected void emit_listaCondicional_ENOTROCASOKeyword_1_1_0_0_or_OTROCASOTerminalRuleCall_1_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'O SI' | SINO
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) expresion ':' i=instrucciones
	 */
	protected void emit_listaCondicional_OSIKeyword_1_0_0_0_or_SINOTerminalRuleCall_1_0_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
