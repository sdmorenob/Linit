/*
 * generated by Xtext 2.12.0
 */
package linit.serializer;

import com.google.inject.Inject;
import java.util.Set;
import linit.linit.LinitPackage;
import linit.linit.condicional;
import linit.linit.declaraciones;
import linit.linit.instrucciones;
import linit.linit.listaCondicional;
import linit.linit.programa;
import linit.services.LinitGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LinitSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LinitGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LinitPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LinitPackage.CONDICIONAL:
				sequence_condicional(context, (condicional) semanticObject); 
				return; 
			case LinitPackage.DECLARACIONES:
				sequence_declaraciones(context, (declaraciones) semanticObject); 
				return; 
			case LinitPackage.INSTRUCCIONES:
				sequence_instrucciones(context, (instrucciones) semanticObject); 
				return; 
			case LinitPackage.LISTA_CONDICIONAL:
				sequence_listaCondicional(context, (listaCondicional) semanticObject); 
				return; 
			case LinitPackage.PROGRAMA:
				sequence_programa(context, (programa) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     condicional returns condicional
	 *
	 * Constraint:
	 *     (i=instrucciones l=listaCondicional)
	 */
	protected void sequence_condicional(ISerializationContext context, condicional semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LinitPackage.Literals.CONDICIONAL__I) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LinitPackage.Literals.CONDICIONAL__I));
			if (transientValues.isValueTransient(semanticObject, LinitPackage.Literals.CONDICIONAL__L) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LinitPackage.Literals.CONDICIONAL__L));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCondicionalAccess().getIInstruccionesParserRuleCall_3_0(), semanticObject.getI());
		feeder.accept(grammarAccess.getCondicionalAccess().getLListaCondicionalParserRuleCall_4_0(), semanticObject.getL());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     declaraciones returns declaraciones
	 *
	 * Constraint:
	 *     (i=instrucciones d=declaraciones)
	 */
	protected void sequence_declaraciones(ISerializationContext context, declaraciones semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LinitPackage.Literals.DECLARACIONES__I) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LinitPackage.Literals.DECLARACIONES__I));
			if (transientValues.isValueTransient(semanticObject, LinitPackage.Literals.DECLARACIONES__D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LinitPackage.Literals.DECLARACIONES__D));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclaracionesAccess().getIInstruccionesParserRuleCall_4_0(), semanticObject.getI());
		feeder.accept(grammarAccess.getDeclaracionesAccess().getDDeclaracionesParserRuleCall_7_0(), semanticObject.getD());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     instrucciones returns instrucciones
	 *     ciclo returns instrucciones
	 *
	 * Constraint:
	 *     (
	 *         i=instrucciones | 
	 *         i=instrucciones | 
	 *         i=instrucciones | 
	 *         (c=condicional i=instrucciones) | 
	 *         (f+=ciclo i=instrucciones) | 
	 *         i=instrucciones | 
	 *         i=instrucciones
	 *     )?
	 */
	protected void sequence_instrucciones(ISerializationContext context, instrucciones semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     listaCondicional returns listaCondicional
	 *
	 * Constraint:
	 *     ((i=instrucciones l=listaCondicional) | i=instrucciones)?
	 */
	protected void sequence_listaCondicional(ISerializationContext context, listaCondicional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     programa returns programa
	 *
	 * Constraint:
	 *     (d=declaraciones i=instrucciones)
	 */
	protected void sequence_programa(ISerializationContext context, programa semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LinitPackage.Literals.PROGRAMA__D) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LinitPackage.Literals.PROGRAMA__D));
			if (transientValues.isValueTransient(semanticObject, LinitPackage.Literals.PROGRAMA__I) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LinitPackage.Literals.PROGRAMA__I));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramaAccess().getDDeclaracionesParserRuleCall_0_0(), semanticObject.getD());
		feeder.accept(grammarAccess.getProgramaAccess().getIInstruccionesParserRuleCall_1_0(), semanticObject.getI());
		feeder.finish();
	}
	
	
}
